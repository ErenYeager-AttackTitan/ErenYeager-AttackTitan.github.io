I"¯s<h1 id="titanic">Titanic</h1>

<h2 id="import-data">Import data</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># we have to restart runtime
</span><span class="err">!</span><span class="n">pip</span> <span class="n">install</span> <span class="n">lazypredict</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Requirement already satisfied: lazypredict in /usr/local/lib/python3.7/dist-packages (0.2.9)
Requirement already satisfied: click==7.1.2 in /usr/local/lib/python3.7/dist-packages (from lazypredict) (7.1.2)
Requirement already satisfied: scikit-learn==0.23.1 in /usr/local/lib/python3.7/dist-packages (from lazypredict) (0.23.1)
Requirement already satisfied: lightgbm==2.3.1 in /usr/local/lib/python3.7/dist-packages (from lazypredict) (2.3.1)
Requirement already satisfied: six==1.15.0 in /usr/local/lib/python3.7/dist-packages (from lazypredict) (1.15.0)
Requirement already satisfied: tqdm==4.56.0 in /usr/local/lib/python3.7/dist-packages (from lazypredict) (4.56.0)
Requirement already satisfied: PyYAML==5.3.1 in /usr/local/lib/python3.7/dist-packages (from lazypredict) (5.3.1)
Requirement already satisfied: joblib==1.0.0 in /usr/local/lib/python3.7/dist-packages (from lazypredict) (1.0.0)
Requirement already satisfied: scipy==1.5.4 in /usr/local/lib/python3.7/dist-packages (from lazypredict) (1.5.4)
Requirement already satisfied: numpy==1.19.1 in /usr/local/lib/python3.7/dist-packages (from lazypredict) (1.19.1)
Requirement already satisfied: xgboost==1.1.1 in /usr/local/lib/python3.7/dist-packages (from lazypredict) (1.1.1)
Requirement already satisfied: pytest==5.4.3 in /usr/local/lib/python3.7/dist-packages (from lazypredict) (5.4.3)
Requirement already satisfied: pandas==1.0.5 in /usr/local/lib/python3.7/dist-packages (from lazypredict) (1.0.5)
Requirement already satisfied: pytz&gt;=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas==1.0.5-&gt;lazypredict) (2018.9)
Requirement already satisfied: python-dateutil&gt;=2.6.1 in /usr/local/lib/python3.7/dist-packages (from pandas==1.0.5-&gt;lazypredict) (2.8.2)
Requirement already satisfied: more-itertools&gt;=4.0.0 in /usr/local/lib/python3.7/dist-packages (from pytest==5.4.3-&gt;lazypredict) (8.12.0)
Requirement already satisfied: pluggy&lt;1.0,&gt;=0.12 in /usr/local/lib/python3.7/dist-packages (from pytest==5.4.3-&gt;lazypredict) (0.13.1)
Requirement already satisfied: packaging in /usr/local/lib/python3.7/dist-packages (from pytest==5.4.3-&gt;lazypredict) (21.3)
Requirement already satisfied: py&gt;=1.5.0 in /usr/local/lib/python3.7/dist-packages (from pytest==5.4.3-&gt;lazypredict) (1.11.0)
Requirement already satisfied: attrs&gt;=17.4.0 in /usr/local/lib/python3.7/dist-packages (from pytest==5.4.3-&gt;lazypredict) (21.2.0)
Requirement already satisfied: importlib-metadata&gt;=0.12 in /usr/local/lib/python3.7/dist-packages (from pytest==5.4.3-&gt;lazypredict) (4.8.2)
Requirement already satisfied: wcwidth in /usr/local/lib/python3.7/dist-packages (from pytest==5.4.3-&gt;lazypredict) (0.2.5)
Requirement already satisfied: threadpoolctl&gt;=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn==0.23.1-&gt;lazypredict) (3.0.0)
Requirement already satisfied: zipp&gt;=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata&gt;=0.12-&gt;pytest==5.4.3-&gt;lazypredict) (3.6.0)
Requirement already satisfied: typing-extensions&gt;=3.6.4 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata&gt;=0.12-&gt;pytest==5.4.3-&gt;lazypredict) (3.10.0.2)
Requirement already satisfied: pyparsing!=3.0.5,&gt;=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging-&gt;pytest==5.4.3-&gt;lazypredict) (3.0.6)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Import the data from Kaggle API
</span><span class="err">!</span><span class="n">pip</span> <span class="n">install</span> <span class="n">kaggle</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">[</span><span class="s">'KAGGLE_USERNAME'</span><span class="p">]</span> <span class="o">=</span> <span class="s">"bensaidlucas"</span> <span class="c1"># username from the json file
</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">[</span><span class="s">'KAGGLE_KEY'</span><span class="p">]</span> <span class="o">=</span> <span class="s">"e66b7ce0f4e8abb888db31a380aeb61d"</span> <span class="c1"># key from the json file
</span><span class="err">!</span> <span class="n">kaggle</span> <span class="n">competitions</span> <span class="n">download</span> <span class="o">-</span><span class="n">c</span> <span class="n">titanic</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Requirement already satisfied: kaggle in /usr/local/lib/python3.7/dist-packages (1.5.12)
Requirement already satisfied: urllib3 in /usr/local/lib/python3.7/dist-packages (from kaggle) (1.24.3)
Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from kaggle) (2.23.0)
Requirement already satisfied: six&gt;=1.10 in /usr/local/lib/python3.7/dist-packages (from kaggle) (1.15.0)
Requirement already satisfied: python-dateutil in /usr/local/lib/python3.7/dist-packages (from kaggle) (2.8.2)
Requirement already satisfied: python-slugify in /usr/local/lib/python3.7/dist-packages (from kaggle) (5.0.2)
Requirement already satisfied: certifi in /usr/local/lib/python3.7/dist-packages (from kaggle) (2021.10.8)
Requirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (from kaggle) (4.56.0)
Requirement already satisfied: text-unidecode&gt;=1.3 in /usr/local/lib/python3.7/dist-packages (from python-slugify-&gt;kaggle) (1.3)
Requirement already satisfied: idna&lt;3,&gt;=2.5 in /usr/local/lib/python3.7/dist-packages (from requests-&gt;kaggle) (2.10)
Requirement already satisfied: chardet&lt;4,&gt;=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests-&gt;kaggle) (3.0.4)
Warning: Looks like you're using an outdated API Version, please consider updating (server 1.5.12 / client 1.5.4)
gender_submission.csv: Skipping, found more recently modified local copy (use --force to force download)
train.csv: Skipping, found more recently modified local copy (use --force to force download)
test.csv: Skipping, found more recently modified local copy (use --force to force download)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Scikit-learn packages
</span><span class="kn">from</span> <span class="nn">sklearn.ensemble</span> <span class="kn">import</span> <span class="n">GradientBoostingRegressor</span>
<span class="kn">from</span> <span class="nn">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">OneHotEncoder</span><span class="p">,</span> <span class="n">StandardScaler</span><span class="p">,</span> <span class="n">FunctionTransformer</span>
<span class="kn">from</span> <span class="nn">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">train_test_split</span><span class="p">,</span> <span class="n">GridSearchCV</span><span class="p">,</span> <span class="n">cross_val_score</span>
<span class="kn">from</span> <span class="nn">sklearn.metrics</span> <span class="kn">import</span> <span class="n">mean_squared_error</span><span class="p">,</span> <span class="n">classification_report</span><span class="p">,</span> <span class="n">accuracy_score</span>

<span class="c1"># import models
</span><span class="kn">from</span> <span class="nn">lightgbm</span> <span class="kn">import</span> <span class="n">LGBMClassifier</span>
<span class="kn">from</span> <span class="nn">sklearn.linear_model</span> <span class="kn">import</span> <span class="n">LogisticRegression</span>
<span class="kn">import</span> <span class="nn">xgboost</span> 
<span class="kn">from</span> <span class="nn">sklearn.ensemble</span> <span class="kn">import</span> <span class="n">AdaBoostClassifier</span><span class="p">,</span> <span class="n">RandomForestClassifier</span>
<span class="kn">from</span> <span class="nn">sklearn.svm</span> <span class="kn">import</span> <span class="n">SVC</span>
<span class="kn">from</span> <span class="nn">sklearn.neighbors</span> <span class="kn">import</span> <span class="n">KNeighborsClassifier</span>
<span class="kn">from</span> <span class="nn">sklearn.tree</span> <span class="kn">import</span> <span class="n">DecisionTreeClassifier</span>

<span class="c1"># Hide warnings
</span><span class="kn">import</span> <span class="nn">warnings</span>
<span class="n">warnings</span><span class="p">.</span><span class="n">filterwarnings</span><span class="p">(</span><span class="s">"ignore"</span><span class="p">)</span>

<span class="c1"># Lazy Predict packages
</span><span class="kn">from</span> <span class="nn">lazypredict.Supervised</span> <span class="kn">import</span> <span class="n">LazyRegressor</span><span class="p">,</span><span class="n">LazyClassifier</span>

<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="n">sns</span>


<span class="c1"># Setting up max columns displayed to 100
</span><span class="n">pd</span><span class="p">.</span><span class="n">options</span><span class="p">.</span><span class="n">display</span><span class="p">.</span><span class="n">max_columns</span> <span class="o">=</span> <span class="mi">10</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Our datasets
</span><span class="n">df_train</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">'/content/train.csv'</span><span class="p">)</span>
<span class="n">df_test</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">'/content/test.csv'</span><span class="p">)</span>

<span class="n">dfs</span> <span class="o">=</span> <span class="p">[(</span><span class="s">'train'</span><span class="p">,</span><span class="n">df_train</span><span class="p">),</span> <span class="p">(</span><span class="s">'test'</span><span class="p">,</span><span class="n">df_test</span><span class="p">)]</span>
<span class="n">df_full</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">concat</span><span class="p">([</span><span class="n">df_train</span><span class="p">,</span> <span class="n">df_test</span><span class="p">],</span> <span class="n">axis</span> <span class="o">=</span> <span class="mi">0</span><span class="p">).</span><span class="n">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="eda">EDA</h2>

<h3 id="datasets">Datasets</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">df</span> <span class="ow">in</span> <span class="n">dfs</span><span class="p">:</span>
  <span class="k">print</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="s">':</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
  <span class="k">print</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">info</span><span class="p">(),</span><span class="s">'</span><span class="se">\n\n\n</span><span class="s">'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>train :

&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 891 entries, 0 to 890
Data columns (total 12 columns):
 #   Column       Non-Null Count  Dtype  
---  ------       --------------  -----  
 0   PassengerId  891 non-null    int64  
 1   Survived     891 non-null    int64  
 2   Pclass       891 non-null    int64  
 3   Name         891 non-null    object 
 4   Sex          891 non-null    object 
 5   Age          714 non-null    float64
 6   SibSp        891 non-null    int64  
 7   Parch        891 non-null    int64  
 8   Ticket       891 non-null    object 
 9   Fare         891 non-null    float64
 10  Cabin        204 non-null    object 
 11  Embarked     889 non-null    object 
dtypes: float64(2), int64(5), object(5)
memory usage: 83.7+ KB
None 



test :

&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 418 entries, 0 to 417
Data columns (total 11 columns):
 #   Column       Non-Null Count  Dtype  
---  ------       --------------  -----  
 0   PassengerId  418 non-null    int64  
 1   Pclass       418 non-null    int64  
 2   Name         418 non-null    object 
 3   Sex          418 non-null    object 
 4   Age          332 non-null    float64
 5   SibSp        418 non-null    int64  
 6   Parch        418 non-null    int64  
 7   Ticket       418 non-null    object 
 8   Fare         417 non-null    float64
 9   Cabin        91 non-null     object 
 10  Embarked     418 non-null    object 
dtypes: float64(2), int64(4), object(5)
memory usage: 36.0+ KB
None 
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_train</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div id="df-14776123-09da-4c8b-b53c-eeef65005cbf">
    <div class="colab-df-container">
      <div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>PassengerId</th>
      <th>Survived</th>
      <th>Pclass</th>
      <th>Name</th>
      <th>Sex</th>
      <th>...</th>
      <th>Parch</th>
      <th>Ticket</th>
      <th>Fare</th>
      <th>Cabin</th>
      <th>Embarked</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>0</td>
      <td>3</td>
      <td>Braund, Mr. Owen Harris</td>
      <td>male</td>
      <td>...</td>
      <td>0</td>
      <td>A/5 21171</td>
      <td>7.25</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>1</td>
      <td>1</td>
      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>
      <td>female</td>
      <td>...</td>
      <td>0</td>
      <td>PC 17599</td>
      <td>71.28</td>
      <td>C85</td>
      <td>C</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>1</td>
      <td>3</td>
      <td>Heikkinen, Miss. Laina</td>
      <td>female</td>
      <td>...</td>
      <td>0</td>
      <td>STON/O2. 3101282</td>
      <td>7.92</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>1</td>
      <td>1</td>
      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>
      <td>female</td>
      <td>...</td>
      <td>0</td>
      <td>113803</td>
      <td>53.10</td>
      <td>C123</td>
      <td>S</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>0</td>
      <td>3</td>
      <td>Allen, Mr. William Henry</td>
      <td>male</td>
      <td>...</td>
      <td>0</td>
      <td>373450</td>
      <td>8.05</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
  </tbody>
</table>
<p>5 rows Ã 12 columns</p>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-14776123-09da-4c8b-b53c-eeef65005cbf')" title="Convert this dataframe to an interactive table." style="display:none;">

  &lt;svg xmlns="http://www.w3.org/2000/svg" height="24px"viewBox="0 0 24 24"
       width="24px"&gt;
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z" /><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z" />
  &lt;/svg&gt;
      </button>

  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-14776123-09da-4c8b-b53c-eeef65005cbf button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-14776123-09da-4c8b-b53c-eeef65005cbf');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>

<h3 id="nan-values">Nan Values</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Count / percentage of Nan values per columns
</span><span class="k">for</span> <span class="n">df</span> <span class="ow">in</span> <span class="n">dfs</span><span class="p">:</span>
  <span class="n">pr</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">Series</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">isna</span><span class="p">().</span><span class="nb">sum</span><span class="p">()</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span> <span class="n">name</span><span class="o">=</span><span class="s">'percent'</span><span class="p">)</span>
  <span class="n">nb</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">Series</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">isna</span><span class="p">().</span><span class="nb">sum</span><span class="p">(),</span> <span class="n">name</span><span class="o">=</span><span class="s">'count'</span><span class="p">)</span>
  
  <span class="k">print</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="s">':</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>

  <span class="n">display</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="n">concat</span><span class="p">([</span><span class="n">nb</span><span class="p">,</span> <span class="n">pr</span><span class="p">],</span><span class="n">axis</span> <span class="o">=</span><span class="mi">1</span><span class="p">))</span>
  <span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="se">\n\n</span><span class="s">'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>train :
</code></pre></div></div>

<div id="df-5ad057d2-c333-4014-a24f-12bc46470271">
    <div class="colab-df-container">
      <div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>count</th>
      <th>percent</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>PassengerId</th>
      <td>0</td>
      <td>0.00</td>
    </tr>
    <tr>
      <th>Survived</th>
      <td>0</td>
      <td>0.00</td>
    </tr>
    <tr>
      <th>Pclass</th>
      <td>0</td>
      <td>0.00</td>
    </tr>
    <tr>
      <th>Name</th>
      <td>0</td>
      <td>0.00</td>
    </tr>
    <tr>
      <th>Sex</th>
      <td>0</td>
      <td>0.00</td>
    </tr>
    <tr>
      <th>Age</th>
      <td>177</td>
      <td>0.20</td>
    </tr>
    <tr>
      <th>SibSp</th>
      <td>0</td>
      <td>0.00</td>
    </tr>
    <tr>
      <th>Parch</th>
      <td>0</td>
      <td>0.00</td>
    </tr>
    <tr>
      <th>Ticket</th>
      <td>0</td>
      <td>0.00</td>
    </tr>
    <tr>
      <th>Fare</th>
      <td>0</td>
      <td>0.00</td>
    </tr>
    <tr>
      <th>Cabin</th>
      <td>687</td>
      <td>0.77</td>
    </tr>
    <tr>
      <th>Embarked</th>
      <td>2</td>
      <td>0.00</td>
    </tr>
  </tbody>
</table>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-5ad057d2-c333-4014-a24f-12bc46470271')" title="Convert this dataframe to an interactive table." style="display:none;">

  &lt;svg xmlns="http://www.w3.org/2000/svg" height="24px"viewBox="0 0 24 24"
       width="24px"&gt;
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z" /><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z" />
  &lt;/svg&gt;
      </button>

  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-5ad057d2-c333-4014-a24f-12bc46470271 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-5ad057d2-c333-4014-a24f-12bc46470271');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>test :
</code></pre></div></div>

<div id="df-ed5f9763-e0d0-410d-a8b1-0eaa98a8d2e0">
    <div class="colab-df-container">
      <div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>count</th>
      <th>percent</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>PassengerId</th>
      <td>0</td>
      <td>0.00</td>
    </tr>
    <tr>
      <th>Pclass</th>
      <td>0</td>
      <td>0.00</td>
    </tr>
    <tr>
      <th>Name</th>
      <td>0</td>
      <td>0.00</td>
    </tr>
    <tr>
      <th>Sex</th>
      <td>0</td>
      <td>0.00</td>
    </tr>
    <tr>
      <th>Age</th>
      <td>86</td>
      <td>0.21</td>
    </tr>
    <tr>
      <th>SibSp</th>
      <td>0</td>
      <td>0.00</td>
    </tr>
    <tr>
      <th>Parch</th>
      <td>0</td>
      <td>0.00</td>
    </tr>
    <tr>
      <th>Ticket</th>
      <td>0</td>
      <td>0.00</td>
    </tr>
    <tr>
      <th>Fare</th>
      <td>1</td>
      <td>0.00</td>
    </tr>
    <tr>
      <th>Cabin</th>
      <td>327</td>
      <td>0.78</td>
    </tr>
    <tr>
      <th>Embarked</th>
      <td>0</td>
      <td>0.00</td>
    </tr>
  </tbody>
</table>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-ed5f9763-e0d0-410d-a8b1-0eaa98a8d2e0')" title="Convert this dataframe to an interactive table." style="display:none;">

  &lt;svg xmlns="http://www.w3.org/2000/svg" height="24px"viewBox="0 0 24 24"
       width="24px"&gt;
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z" /><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z" />
  &lt;/svg&gt;
      </button>

  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-ed5f9763-e0d0-410d-a8b1-0eaa98a8d2e0 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-ed5f9763-e0d0-410d-a8b1-0eaa98a8d2e0');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>

<p><strong>Cabin</strong> has more than 75% values in both datasets we will drop it</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">df</span> <span class="ow">in</span> <span class="n">dfs</span><span class="p">:</span>
  <span class="n">df</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">drop</span><span class="p">(</span><span class="s">'Cabin'</span><span class="p">,</span> <span class="n">axis</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">inplace</span> <span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<p><strong>Embarked</strong> from train</p>

<p>From <a href="https://www.encyclopedia-titanica.org/titanic-survivor/martha-evelyn-stone.html">link</a>:</p>

<blockquote>
  <p>â<em>Mrs Stone boarded the Titanic in Southampton on 10 April 1912 and was travelling in first class with her maid Amelie Icard. She occupied cabin B-28.</em>â</p>
</blockquote>

<p>We will fill by âSâ</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_train</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">df_train</span><span class="p">[</span><span class="s">'Embarked'</span><span class="p">].</span><span class="n">isnull</span><span class="p">()]</span>
</code></pre></div></div>

<div id="df-e2d4d914-bce4-4ea2-bcc2-546f6d724839">
    <div class="colab-df-container">
      <div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>PassengerId</th>
      <th>Survived</th>
      <th>Pclass</th>
      <th>Name</th>
      <th>Sex</th>
      <th>...</th>
      <th>SibSp</th>
      <th>Parch</th>
      <th>Ticket</th>
      <th>Fare</th>
      <th>Embarked</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>61</th>
      <td>62</td>
      <td>1</td>
      <td>1</td>
      <td>Icard, Miss. Amelie</td>
      <td>female</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>113572</td>
      <td>80.00</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>829</th>
      <td>830</td>
      <td>1</td>
      <td>1</td>
      <td>Stone, Mrs. George Nelson (Martha Evelyn)</td>
      <td>female</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>113572</td>
      <td>80.00</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
<p>2 rows Ã 11 columns</p>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-e2d4d914-bce4-4ea2-bcc2-546f6d724839')" title="Convert this dataframe to an interactive table." style="display:none;">

  &lt;svg xmlns="http://www.w3.org/2000/svg" height="24px"viewBox="0 0 24 24"
       width="24px"&gt;
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z" /><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z" />
  &lt;/svg&gt;
      </button>

  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-e2d4d914-bce4-4ea2-bcc2-546f6d724839 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-e2d4d914-bce4-4ea2-bcc2-546f6d724839');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_train</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">df_train</span><span class="p">[</span><span class="s">'Embarked'</span><span class="p">].</span><span class="n">isnull</span><span class="p">(),</span> <span class="s">'Embarked'</span><span class="p">]</span> <span class="o">=</span> <span class="s">'S'</span>
</code></pre></div></div>

<p>Next:</p>

<p><strong>Train</strong>:</p>

<blockquote>
  <p>Fill nan values of Age</p>
</blockquote>

<p><strong>Test</strong>:</p>

<blockquote>
  <p>Fill nan values of Age and Fare</p>
</blockquote>

<h3 id="data-types">Data types</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">df</span> <span class="ow">in</span> <span class="n">dfs</span><span class="p">:</span>

  <span class="n">t</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">nunique</span><span class="p">().</span><span class="n">sort_values</span><span class="p">(</span><span class="n">ascending</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

  <span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span>
  <span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">df</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="si">}</span><span class="s">: Nb of unique elements / column"</span><span class="p">)</span>
  <span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Count'</span><span class="p">)</span>
  <span class="n">plt</span><span class="p">.</span><span class="n">bar</span><span class="p">(</span><span class="n">t</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">t</span><span class="p">.</span><span class="n">values</span><span class="p">)</span>
  <span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>

  <span class="n">nb</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">Series</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">name</span> <span class="o">=</span> <span class="s">'number'</span><span class="p">)</span>
  <span class="n">pr</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">Series</span><span class="p">(</span><span class="n">t</span><span class="o">/</span><span class="nb">len</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span> <span class="n">name</span> <span class="o">=</span> <span class="s">'percentage'</span><span class="p">)</span>
  
  <span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="se">\n\n</span><span class="s">Unique element / column:'</span><span class="p">)</span>
  <span class="n">display</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="n">concat</span><span class="p">([</span><span class="n">nb</span><span class="p">,</span><span class="n">pr</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">))</span>
  <span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="se">\n\n</span><span class="s">'</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="output_19_0.png" alt="png" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Unique element / column:
</code></pre></div></div>

<div id="df-b0fb19d5-0c33-4585-aa94-91fd8670acb7">
    <div class="colab-df-container">
      <div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>number</th>
      <th>percentage</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Name</th>
      <td>891</td>
      <td>1.00</td>
    </tr>
    <tr>
      <th>PassengerId</th>
      <td>891</td>
      <td>1.00</td>
    </tr>
    <tr>
      <th>Ticket</th>
      <td>681</td>
      <td>0.76</td>
    </tr>
    <tr>
      <th>Fare</th>
      <td>248</td>
      <td>0.28</td>
    </tr>
    <tr>
      <th>Age</th>
      <td>88</td>
      <td>0.10</td>
    </tr>
    <tr>
      <th>Parch</th>
      <td>7</td>
      <td>0.01</td>
    </tr>
    <tr>
      <th>SibSp</th>
      <td>7</td>
      <td>0.01</td>
    </tr>
    <tr>
      <th>Embarked</th>
      <td>3</td>
      <td>0.00</td>
    </tr>
    <tr>
      <th>Pclass</th>
      <td>3</td>
      <td>0.00</td>
    </tr>
    <tr>
      <th>Sex</th>
      <td>2</td>
      <td>0.00</td>
    </tr>
    <tr>
      <th>Survived</th>
      <td>2</td>
      <td>0.00</td>
    </tr>
  </tbody>
</table>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-b0fb19d5-0c33-4585-aa94-91fd8670acb7')" title="Convert this dataframe to an interactive table." style="display:none;">

  &lt;svg xmlns="http://www.w3.org/2000/svg" height="24px"viewBox="0 0 24 24"
       width="24px"&gt;
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z" /><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z" />
  &lt;/svg&gt;
      </button>

  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-b0fb19d5-0c33-4585-aa94-91fd8670acb7 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-b0fb19d5-0c33-4585-aa94-91fd8670acb7');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>

<p><img src="output_19_4.png" alt="png" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Unique element / column:
</code></pre></div></div>

<div id="df-3baaf401-b689-456d-8923-e96f83f1eb05">
    <div class="colab-df-container">
      <div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>number</th>
      <th>percentage</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Name</th>
      <td>418</td>
      <td>1.00</td>
    </tr>
    <tr>
      <th>PassengerId</th>
      <td>418</td>
      <td>1.00</td>
    </tr>
    <tr>
      <th>Ticket</th>
      <td>363</td>
      <td>0.87</td>
    </tr>
    <tr>
      <th>Fare</th>
      <td>169</td>
      <td>0.40</td>
    </tr>
    <tr>
      <th>Age</th>
      <td>79</td>
      <td>0.19</td>
    </tr>
    <tr>
      <th>Parch</th>
      <td>8</td>
      <td>0.02</td>
    </tr>
    <tr>
      <th>SibSp</th>
      <td>7</td>
      <td>0.02</td>
    </tr>
    <tr>
      <th>Embarked</th>
      <td>3</td>
      <td>0.01</td>
    </tr>
    <tr>
      <th>Pclass</th>
      <td>3</td>
      <td>0.01</td>
    </tr>
    <tr>
      <th>Sex</th>
      <td>2</td>
      <td>0.00</td>
    </tr>
  </tbody>
</table>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-3baaf401-b689-456d-8923-e96f83f1eb05')" title="Convert this dataframe to an interactive table." style="display:none;">

  &lt;svg xmlns="http://www.w3.org/2000/svg" height="24px"viewBox="0 0 24 24"
       width="24px"&gt;
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z" /><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z" />
  &lt;/svg&gt;
      </button>

  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-3baaf401-b689-456d-8923-e96f83f1eb05 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-3baaf401-b689-456d-8923-e96f83f1eb05');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>

<p><strong>Numerical:</strong></p>
<ul>
  <li>Discrete
    <blockquote>
      <p>Parch, SibSp</p>
    </blockquote>
  </li>
  <li>Continuous
    <blockquote>
      <p>Fare, Age</p>
    </blockquote>
  </li>
</ul>

<p><strong>Categorical:</strong></p>
<ul>
  <li>Nominal
    <blockquote>
      <p>Name, PassengerId, Ticket, Cabin, Embarked, Sex, Survived (<em>target</em>)</p>
    </blockquote>
  </li>
  <li>Ordinal
    <blockquote>
      <p>Pclass</p>
    </blockquote>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">num_cols</span> <span class="o">=</span> <span class="p">[</span><span class="s">'Fare'</span><span class="p">,</span> <span class="s">'Age'</span><span class="p">]</span>
<span class="n">num_cnt_cols</span> <span class="o">=</span> <span class="p">[</span><span class="s">'Parch'</span><span class="p">,</span> <span class="s">'SibSp'</span><span class="p">]</span>
<span class="n">nominal_cols</span> <span class="o">=</span> <span class="p">[</span><span class="s">'Name'</span><span class="p">,</span> <span class="s">'PassengerId'</span><span class="p">,</span> <span class="s">'Ticket'</span><span class="p">,</span> <span class="s">'Embarked'</span><span class="p">,</span> <span class="s">'Sex'</span><span class="p">]</span>
<span class="n">ordinal_cols</span> <span class="o">=</span> <span class="p">[</span><span class="s">'Pclass'</span><span class="p">]</span>
<span class="n">target</span> <span class="o">=</span> <span class="p">[</span><span class="s">'Survived'</span><span class="p">]</span>
</code></pre></div></div>

<h3 id="data-distribution">Data distribution</h3>

<h4 id="target">Target</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">t</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">[</span><span class="s">'Survived'</span><span class="p">].</span><span class="n">value_counts</span><span class="p">(</span><span class="n">sort</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span><span class="mi">6</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="n">bar</span><span class="p">(</span><span class="n">t</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="n">astype</span><span class="p">(</span><span class="s">'str'</span><span class="p">),</span> <span class="n">t</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'count'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Survived'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Survived distribution'</span><span class="p">)</span>


<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">t</span><span class="p">.</span><span class="n">index</span><span class="p">:</span>
  <span class="n">plt</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="s">"{0:.0f}%"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">t</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">*</span><span class="mi">100</span><span class="o">/</span><span class="nb">len</span><span class="p">(</span><span class="n">df_train</span><span class="p">)),</span><span class="n">xy</span><span class="o">=</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">t</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="p">,</span><span class="n">ha</span><span class="o">=</span><span class="s">'center'</span><span class="p">,</span> <span class="n">va</span><span class="o">=</span><span class="s">'bottom'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="output_24_0.png" alt="png" /></p>

<p>38 % of the passenger survived</p>

<h4 id="numerical">Numerical</h4>

<h5 id="distribution">Distribution</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">14</span><span class="p">,</span><span class="mi">12</span><span class="p">))</span>
<span class="n">i</span><span class="o">=</span><span class="mi">1</span>
<span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="n">num_cols</span><span class="p">:</span>
  <span class="n">plt</span><span class="p">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="n">i</span><span class="p">)</span>
  <span class="n">plt</span><span class="p">.</span><span class="n">hist</span><span class="p">(</span><span class="n">df_train</span><span class="p">[</span><span class="n">col</span><span class="p">],</span> <span class="n">bins</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span>
  <span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'count'</span><span class="p">)</span>
  <span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="n">col</span><span class="p">)</span>
  <span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="n">col</span><span class="o">+</span><span class="s">' distribution'</span><span class="p">)</span>  
  <span class="n">i</span><span class="o">+=</span><span class="mi">1</span>

<span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="n">num_cnt_cols</span><span class="p">:</span>
  <span class="n">plt</span><span class="p">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="n">i</span><span class="p">)</span>
  <span class="n">vc</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">[</span><span class="n">col</span><span class="p">].</span><span class="n">value_counts</span><span class="p">(</span><span class="n">sort</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

  <span class="n">plt</span><span class="p">.</span><span class="n">bar</span><span class="p">(</span><span class="n">vc</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">str</span><span class="p">),</span> <span class="n">vc</span><span class="p">)</span>
  <span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'count'</span><span class="p">)</span>
  <span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="n">col</span><span class="p">)</span>
  <span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="n">col</span><span class="o">+</span><span class="s">' distribution'</span><span class="p">)</span>

  <span class="k">for</span> <span class="nb">id</span> <span class="ow">in</span> <span class="n">vc</span><span class="p">.</span><span class="n">index</span><span class="p">:</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="s">"{0:.0f}%"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">vc</span><span class="p">[</span><span class="nb">id</span><span class="p">]</span><span class="o">*</span><span class="mi">100</span><span class="o">/</span><span class="nb">len</span><span class="p">(</span><span class="n">df_train</span><span class="p">)),</span><span class="n">xy</span><span class="o">=</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="nb">id</span><span class="p">),</span> <span class="n">vc</span><span class="p">[</span><span class="nb">id</span><span class="p">])</span> <span class="p">,</span><span class="n">ha</span><span class="o">=</span><span class="s">'center'</span><span class="p">,</span> <span class="n">va</span><span class="o">=</span><span class="s">'bottom'</span><span class="p">)</span>

  <span class="n">i</span><span class="o">+=</span><span class="mi">1</span>

<span class="n">plt</span><span class="p">.</span><span class="n">tight_layout</span><span class="p">(</span><span class="n">pad</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>

</code></pre></div></div>

<p><img src="output_28_0.png" alt="png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_train</span><span class="p">[</span><span class="n">num_cols</span> <span class="o">+</span> <span class="n">num_cnt_cols</span><span class="p">].</span><span class="n">describe</span><span class="p">()</span>
</code></pre></div></div>

<div id="df-2f50f187-a9d8-42ad-9afd-21fbda98c728">
    <div class="colab-df-container">
      <div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Fare</th>
      <th>Age</th>
      <th>Parch</th>
      <th>SibSp</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>891.00</td>
      <td>714.00</td>
      <td>891.00</td>
      <td>891.00</td>
    </tr>
    <tr>
      <th>mean</th>
      <td>32.20</td>
      <td>29.70</td>
      <td>0.38</td>
      <td>0.52</td>
    </tr>
    <tr>
      <th>std</th>
      <td>49.69</td>
      <td>14.53</td>
      <td>0.81</td>
      <td>1.10</td>
    </tr>
    <tr>
      <th>min</th>
      <td>0.00</td>
      <td>0.42</td>
      <td>0.00</td>
      <td>0.00</td>
    </tr>
    <tr>
      <th>25%</th>
      <td>7.91</td>
      <td>20.12</td>
      <td>0.00</td>
      <td>0.00</td>
    </tr>
    <tr>
      <th>50%</th>
      <td>14.45</td>
      <td>28.00</td>
      <td>0.00</td>
      <td>0.00</td>
    </tr>
    <tr>
      <th>75%</th>
      <td>31.00</td>
      <td>38.00</td>
      <td>0.00</td>
      <td>1.00</td>
    </tr>
    <tr>
      <th>max</th>
      <td>512.33</td>
      <td>80.00</td>
      <td>6.00</td>
      <td>8.00</td>
    </tr>
  </tbody>
</table>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-2f50f187-a9d8-42ad-9afd-21fbda98c728')" title="Convert this dataframe to an interactive table." style="display:none;">

  &lt;svg xmlns="http://www.w3.org/2000/svg" height="24px"viewBox="0 0 24 24"
       width="24px"&gt;
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z" /><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z" />
  &lt;/svg&gt;
      </button>

  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-2f50f187-a9d8-42ad-9afd-21fbda98c728 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-2f50f187-a9d8-42ad-9afd-21fbda98c728');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>

<p>Most of passengers have 0 PARentsCHildren and 0 SIBlingSPouse =&gt; Alone</p>

<p>The average Age is around 30 years</p>

<h5 id="distribution--target">Distribution / target</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="n">num_cols</span><span class="p">:</span>
  <span class="n">i</span><span class="o">=</span><span class="mi">0</span>
  <span class="n">f</span><span class="p">,</span> <span class="n">sub</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span> <span class="p">,</span><span class="n">sharex</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">sharey</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
  <span class="n">sub</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">hist</span><span class="p">(</span><span class="n">df_train</span><span class="p">[</span><span class="n">col</span><span class="p">].</span><span class="n">loc</span><span class="p">[</span><span class="n">df_train</span><span class="p">[</span><span class="s">'Survived'</span><span class="p">]</span><span class="o">==</span><span class="mi">1</span><span class="p">])</span>
  <span class="n">sub</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">'count'</span><span class="p">)</span>
  <span class="n">sub</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">set_title</span><span class="p">(</span><span class="n">col</span><span class="o">+</span><span class="s">'_Survived'</span><span class="p">)</span>
  <span class="n">i</span><span class="o">+=</span><span class="mi">1</span>
  <span class="n">sub</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">hist</span><span class="p">(</span><span class="n">df_train</span><span class="p">[</span><span class="n">col</span><span class="p">].</span><span class="n">loc</span><span class="p">[</span><span class="n">df_train</span><span class="p">[</span><span class="s">'Survived'</span><span class="p">]</span><span class="o">==</span><span class="mi">0</span><span class="p">])</span>
  <span class="n">sub</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">'count'</span><span class="p">)</span>
  <span class="n">sub</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">set_title</span><span class="p">(</span><span class="n">col</span><span class="o">+</span><span class="s">'_Not_Survived'</span><span class="p">)</span>
  <span class="n">i</span><span class="o">+=</span><span class="mi">1</span>


<span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="n">num_cnt_cols</span><span class="p">:</span>
  <span class="n">i</span><span class="o">=</span><span class="mi">0</span>
  <span class="n">f</span><span class="p">,</span> <span class="n">sub</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span> <span class="p">,</span> <span class="n">sharex</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">sharey</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
  <span class="n">vc</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">[</span><span class="n">col</span><span class="p">].</span><span class="n">loc</span><span class="p">[</span><span class="n">df_train</span><span class="p">[</span><span class="s">'Survived'</span><span class="p">]</span><span class="o">==</span><span class="mi">1</span><span class="p">].</span><span class="n">value_counts</span><span class="p">(</span><span class="n">sort</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
  <span class="n">sub</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">bar</span><span class="p">(</span><span class="n">vc</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">str</span><span class="p">),</span><span class="n">vc</span><span class="p">)</span>
  <span class="n">sub</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">'count'</span><span class="p">)</span>
  <span class="n">sub</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">set_title</span><span class="p">(</span><span class="n">col</span><span class="o">+</span><span class="s">'_Survived'</span><span class="p">)</span>

  <span class="k">for</span> <span class="nb">id</span> <span class="ow">in</span> <span class="n">vc</span><span class="p">.</span><span class="n">index</span><span class="p">:</span>
    <span class="n">sub</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">annotate</span><span class="p">(</span><span class="s">"{0:.0f}%"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">vc</span><span class="p">[</span><span class="nb">id</span><span class="p">]</span><span class="o">*</span><span class="mi">100</span><span class="o">/</span><span class="nb">sum</span><span class="p">(</span><span class="n">vc</span><span class="p">)),</span><span class="n">xy</span><span class="o">=</span><span class="p">(</span><span class="nb">id</span><span class="p">,</span> <span class="n">vc</span><span class="p">[</span><span class="nb">id</span><span class="p">])</span> <span class="p">,</span><span class="n">ha</span><span class="o">=</span><span class="s">'center'</span><span class="p">,</span> <span class="n">va</span><span class="o">=</span><span class="s">'bottom'</span><span class="p">)</span>

  <span class="n">i</span><span class="o">+=</span><span class="mi">1</span>

  <span class="n">vc</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">[</span><span class="n">col</span><span class="p">].</span><span class="n">loc</span><span class="p">[</span><span class="n">df_train</span><span class="p">[</span><span class="s">'Survived'</span><span class="p">]</span><span class="o">==</span><span class="mi">0</span><span class="p">].</span><span class="n">value_counts</span><span class="p">(</span><span class="n">sort</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
  <span class="n">sub</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">bar</span><span class="p">(</span><span class="n">vc</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">str</span><span class="p">),</span><span class="n">vc</span><span class="p">)</span>  
  <span class="n">sub</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">'count'</span><span class="p">)</span>
  <span class="n">sub</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">set_title</span><span class="p">(</span><span class="n">col</span><span class="o">+</span><span class="s">'_Not_Survived'</span><span class="p">)</span>

  <span class="k">for</span> <span class="nb">id</span> <span class="ow">in</span> <span class="n">vc</span><span class="p">.</span><span class="n">index</span><span class="p">:</span>
    <span class="n">sub</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">annotate</span><span class="p">(</span><span class="s">"{0:.0f}%"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">vc</span><span class="p">[</span><span class="nb">id</span><span class="p">]</span><span class="o">*</span><span class="mi">100</span><span class="o">/</span><span class="nb">sum</span><span class="p">(</span><span class="n">vc</span><span class="p">)),</span><span class="n">xy</span><span class="o">=</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="nb">id</span><span class="p">),</span> <span class="n">vc</span><span class="p">[</span><span class="nb">id</span><span class="p">])</span> <span class="p">,</span><span class="n">ha</span><span class="o">=</span><span class="s">'center'</span><span class="p">,</span> <span class="n">va</span><span class="o">=</span><span class="s">'bottom'</span><span class="p">)</span>

  <span class="n">i</span><span class="o">+=</span><span class="mi">1</span>

<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>

</code></pre></div></div>

<p><img src="output_32_0.png" alt="png" /></p>

<p><img src="output_32_1.png" alt="png" /></p>

<p><img src="output_32_2.png" alt="png" /></p>

<p><img src="output_32_3.png" alt="png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">f</span><span class="p">,</span><span class="n">sub</span><span class="o">=</span><span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
<span class="n">i</span><span class="o">=</span><span class="mi">0</span>

<span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="n">num_cnt_cols</span><span class="p">:</span>
  <span class="n">sns</span><span class="p">.</span><span class="n">countplot</span><span class="p">(</span><span class="n">ax</span><span class="o">=</span><span class="n">sub</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">x</span><span class="o">=</span> <span class="n">col</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">,</span> <span class="n">hue</span> <span class="o">=</span> <span class="s">'Survived'</span><span class="p">)</span>
  <span class="n">sub</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="s">'upper right'</span><span class="p">)</span>
  <span class="n">sub</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">set_title</span><span class="p">(</span><span class="n">col</span><span class="p">)</span>
  <span class="n">i</span><span class="o">+=</span><span class="mi">1</span>
</code></pre></div></div>

<p><img src="output_33_0.png" alt="png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">f</span><span class="p">,</span><span class="n">sub</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">14</span><span class="p">,</span><span class="mi">7</span><span class="p">)</span> <span class="p">,</span><span class="n">sharey</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">i</span><span class="o">=</span><span class="mi">0</span>
<span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="n">num_cnt_cols</span><span class="p">:</span>
  <span class="n">gp</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">.</span><span class="n">groupby</span><span class="p">([</span><span class="n">col</span><span class="p">]).</span><span class="n">Survived</span><span class="p">.</span><span class="n">mean</span><span class="p">()</span>
  <span class="n">sub</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">bar</span><span class="p">(</span><span class="n">gp</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">str</span><span class="p">),</span> <span class="n">gp</span><span class="p">)</span>
  <span class="n">sub</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">'Avg Survived rate'</span><span class="p">)</span>
  <span class="n">sub</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">set_title</span><span class="p">(</span><span class="n">col</span><span class="p">)</span>
  <span class="k">for</span> <span class="nb">id</span> <span class="ow">in</span> <span class="n">gp</span><span class="p">.</span><span class="n">index</span><span class="p">:</span>
    <span class="n">sub</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">annotate</span><span class="p">(</span><span class="s">"{0:.0f}%"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">gp</span><span class="p">[</span><span class="nb">id</span><span class="p">]</span><span class="o">*</span><span class="mi">100</span><span class="p">),</span><span class="n">xy</span><span class="o">=</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="nb">id</span><span class="p">),</span> <span class="n">gp</span><span class="p">[</span><span class="nb">id</span><span class="p">])</span> 
    <span class="p">,</span><span class="n">ha</span><span class="o">=</span><span class="s">'center'</span><span class="p">,</span> <span class="n">va</span><span class="o">=</span><span class="s">'bottom'</span><span class="p">)</span>

  <span class="n">i</span><span class="o">+=</span><span class="mi">1</span>

<span class="n">plt</span><span class="p">.</span><span class="n">tight_layout</span><span class="p">(</span><span class="n">pad</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="output_34_0.png" alt="png" /></p>

<p>Observations:</p>

<ul>
  <li>
    <p>Lowcost passengers, Alone passenger and big famillies have the worst survival rate we will go further below using Pclass variable</p>
  </li>
  <li>
    <p>Children, old (&gt;70) passengers  and small famillies have higher survival rate</p>
  </li>
</ul>

<h4 id="nominal">Nominal</h4>

<h5 id="overview">Overview</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_train</span><span class="p">[</span><span class="n">nominal_cols</span><span class="p">].</span><span class="n">describe</span><span class="p">(</span><span class="n">include</span><span class="o">=</span><span class="s">'O'</span><span class="p">)</span>
</code></pre></div></div>

<div id="df-7037d849-daf9-44d7-9df0-51f8247192f2">
    <div class="colab-df-container">
      <div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Name</th>
      <th>Ticket</th>
      <th>Embarked</th>
      <th>Sex</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>891</td>
      <td>891</td>
      <td>891</td>
      <td>891</td>
    </tr>
    <tr>
      <th>unique</th>
      <td>891</td>
      <td>681</td>
      <td>3</td>
      <td>2</td>
    </tr>
    <tr>
      <th>top</th>
      <td>Thorneycroft, Mrs. Percival (Florence Kate White)</td>
      <td>1601</td>
      <td>S</td>
      <td>male</td>
    </tr>
    <tr>
      <th>freq</th>
      <td>1</td>
      <td>7</td>
      <td>646</td>
      <td>577</td>
    </tr>
  </tbody>
</table>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-7037d849-daf9-44d7-9df0-51f8247192f2')" title="Convert this dataframe to an interactive table." style="display:none;">

  &lt;svg xmlns="http://www.w3.org/2000/svg" height="24px"viewBox="0 0 24 24"
       width="24px"&gt;
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z" /><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z" />
  &lt;/svg&gt;
      </button>

  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-7037d849-daf9-44d7-9df0-51f8247192f2 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-7037d849-daf9-44d7-9df0-51f8247192f2');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_train</span><span class="p">[[</span><span class="s">'Name'</span><span class="p">,</span><span class="s">'Ticket'</span><span class="p">]].</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div id="df-c32e6a3f-b47b-4198-ac3c-736d15523d2a">
    <div class="colab-df-container">
      <div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Name</th>
      <th>Ticket</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Braund, Mr. Owen Harris</td>
      <td>A/5 21171</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>
      <td>PC 17599</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Heikkinen, Miss. Laina</td>
      <td>STON/O2. 3101282</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>
      <td>113803</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Allen, Mr. William Henry</td>
      <td>373450</td>
    </tr>
  </tbody>
</table>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-c32e6a3f-b47b-4198-ac3c-736d15523d2a')" title="Convert this dataframe to an interactive table." style="display:none;">

  &lt;svg xmlns="http://www.w3.org/2000/svg" height="24px"viewBox="0 0 24 24"
       width="24px"&gt;
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z" /><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z" />
  &lt;/svg&gt;
      </button>

  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-c32e6a3f-b47b-4198-ac3c-736d15523d2a button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-c32e6a3f-b47b-4198-ac3c-736d15523d2a');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>

<p>From the name we can extract the title</p>

<h5 id="distribution-1">Distribution</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_train</span><span class="p">[</span><span class="n">nominal_cols</span><span class="p">].</span><span class="n">describe</span><span class="p">(</span><span class="n">include</span><span class="o">=</span><span class="s">'O'</span><span class="p">)</span>
</code></pre></div></div>

<div id="df-dc63c363-7765-4b6d-9398-ec8eb20cf230">
    <div class="colab-df-container">
      <div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Name</th>
      <th>Ticket</th>
      <th>Embarked</th>
      <th>Sex</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>891</td>
      <td>891</td>
      <td>891</td>
      <td>891</td>
    </tr>
    <tr>
      <th>unique</th>
      <td>891</td>
      <td>681</td>
      <td>3</td>
      <td>2</td>
    </tr>
    <tr>
      <th>top</th>
      <td>Thorneycroft, Mrs. Percival (Florence Kate White)</td>
      <td>1601</td>
      <td>S</td>
      <td>male</td>
    </tr>
    <tr>
      <th>freq</th>
      <td>1</td>
      <td>7</td>
      <td>646</td>
      <td>577</td>
    </tr>
  </tbody>
</table>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-dc63c363-7765-4b6d-9398-ec8eb20cf230')" title="Convert this dataframe to an interactive table." style="display:none;">

  &lt;svg xmlns="http://www.w3.org/2000/svg" height="24px"viewBox="0 0 24 24"
       width="24px"&gt;
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z" /><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z" />
  &lt;/svg&gt;
      </button>

  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-dc63c363-7765-4b6d-9398-ec8eb20cf230 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-dc63c363-7765-4b6d-9398-ec8eb20cf230');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">t</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">[</span><span class="n">nominal_cols</span><span class="p">].</span><span class="n">nunique</span><span class="p">()</span><span class="o">&lt;</span><span class="mi">10</span>

<span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">14</span><span class="p">,</span><span class="mi">7</span><span class="p">))</span>
<span class="n">i</span><span class="o">=</span><span class="mi">1</span>
<span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="n">t</span><span class="p">[</span><span class="n">t</span><span class="p">].</span><span class="n">index</span><span class="p">:</span>
  <span class="n">plt</span><span class="p">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="n">i</span><span class="p">)</span>
  <span class="n">vc</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">[</span><span class="n">col</span><span class="p">].</span><span class="n">value_counts</span><span class="p">(</span><span class="n">sort</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

  <span class="n">plt</span><span class="p">.</span><span class="n">bar</span><span class="p">(</span><span class="n">vc</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">vc</span><span class="p">)</span>
  <span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'count'</span><span class="p">)</span>
  <span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="n">col</span><span class="p">)</span>

  <span class="k">for</span> <span class="nb">id</span> <span class="ow">in</span> <span class="n">vc</span><span class="p">.</span><span class="n">index</span><span class="p">:</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="s">"{0:.0f}%"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">vc</span><span class="p">[</span><span class="nb">id</span><span class="p">]</span><span class="o">*</span><span class="mi">100</span><span class="o">/</span><span class="nb">len</span><span class="p">(</span><span class="n">df_train</span><span class="p">)),</span><span class="n">xy</span><span class="o">=</span><span class="p">(</span><span class="nb">id</span><span class="p">,</span> <span class="n">vc</span><span class="p">[</span><span class="nb">id</span><span class="p">])</span> <span class="p">,</span><span class="n">ha</span><span class="o">=</span><span class="s">'center'</span><span class="p">,</span> <span class="n">va</span><span class="o">=</span><span class="s">'bottom'</span><span class="p">)</span>
  
  <span class="n">i</span><span class="o">+=</span><span class="mi">1</span>
<span class="n">plt</span><span class="p">.</span><span class="n">tight_layout</span><span class="p">(</span><span class="n">pad</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="output_43_0.png" alt="png" /></p>

<h5 id="distribution--target-1">Distribution / target</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">f</span><span class="p">,</span> <span class="n">sub</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">14</span><span class="p">,</span><span class="mi">7</span><span class="p">),</span> <span class="n">sharey</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>
<span class="n">i</span><span class="o">=</span><span class="mi">0</span>
<span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="n">t</span><span class="p">[</span><span class="n">t</span><span class="p">].</span><span class="n">index</span><span class="p">:</span>
  <span class="n">gp</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">.</span><span class="n">groupby</span><span class="p">([</span><span class="n">col</span><span class="p">]).</span><span class="n">Survived</span><span class="p">.</span><span class="n">mean</span><span class="p">()</span>
  <span class="n">sub</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">bar</span><span class="p">(</span><span class="n">gp</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">gp</span><span class="p">)</span>
  <span class="n">sub</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">'Avg Survived rate'</span><span class="p">)</span>
  <span class="n">sub</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">set_title</span><span class="p">(</span><span class="n">col</span><span class="p">)</span>
  <span class="k">for</span> <span class="nb">id</span> <span class="ow">in</span> <span class="n">gp</span><span class="p">.</span><span class="n">index</span><span class="p">:</span>
    <span class="n">sub</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">annotate</span><span class="p">(</span><span class="s">"{0:.0f}%"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">gp</span><span class="p">[</span><span class="nb">id</span><span class="p">]</span><span class="o">*</span><span class="mi">100</span><span class="p">),</span><span class="n">xy</span><span class="o">=</span><span class="p">(</span><span class="nb">id</span><span class="p">,</span> <span class="n">gp</span><span class="p">[</span><span class="nb">id</span><span class="p">])</span> 
    <span class="p">,</span><span class="n">ha</span><span class="o">=</span><span class="s">'center'</span><span class="p">,</span> <span class="n">va</span><span class="o">=</span><span class="s">'bottom'</span><span class="p">)</span>
  <span class="n">i</span><span class="o">+=</span><span class="mi">1</span>
<span class="n">plt</span><span class="p">.</span><span class="n">tight_layout</span><span class="p">(</span><span class="n">pad</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>

</code></pre></div></div>

<p><img src="output_45_0.png" alt="png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">f</span><span class="p">,</span><span class="n">sub</span><span class="o">=</span><span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
<span class="n">i</span><span class="o">=</span><span class="mi">0</span>

<span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="n">t</span><span class="p">[</span><span class="n">t</span><span class="p">].</span><span class="n">index</span><span class="p">:</span>
  <span class="n">sns</span><span class="p">.</span><span class="n">countplot</span><span class="p">(</span><span class="n">ax</span><span class="o">=</span><span class="n">sub</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">x</span><span class="o">=</span> <span class="n">col</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">,</span> <span class="n">hue</span> <span class="o">=</span> <span class="s">'Survived'</span><span class="p">)</span>
  <span class="n">sub</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="s">'upper right'</span><span class="p">)</span>
  <span class="n">sub</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">set_title</span><span class="p">(</span><span class="n">col</span><span class="p">)</span>
  <span class="n">i</span><span class="o">+=</span><span class="mi">1</span>
</code></pre></div></div>

<p><img src="output_46_0.png" alt="png" /></p>

<p>Observations:</p>

<ul>
  <li>Male passengers have a terrible survival rate (80% died) and female a great one (74% survived)</li>
  <li>Passengers have embarked from C have higher survival rate (55%) much better than passengers from S (34%) it may be related to the class</li>
</ul>

<h4 id="ordinal">Ordinal</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">t</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">[</span><span class="s">'Pclass'</span><span class="p">].</span><span class="n">value_counts</span><span class="p">(</span><span class="n">sort</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span><span class="mi">6</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="n">bar</span><span class="p">(</span><span class="n">t</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="n">astype</span><span class="p">(</span><span class="s">'str'</span><span class="p">),</span> <span class="n">t</span><span class="p">.</span><span class="n">values</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'count'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Pclass'</span><span class="p">)</span>

<span class="k">for</span> <span class="nb">id</span> <span class="ow">in</span> <span class="n">t</span><span class="p">.</span><span class="n">index</span><span class="p">:</span>
  <span class="n">plt</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="s">"{0:.0f}%"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">t</span><span class="p">[</span><span class="nb">id</span><span class="p">]</span><span class="o">*</span><span class="mi">100</span><span class="o">/</span><span class="nb">sum</span><span class="p">(</span><span class="n">t</span><span class="p">)),</span><span class="n">xy</span><span class="o">=</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="nb">id</span><span class="p">),</span> <span class="n">t</span><span class="p">[</span><span class="nb">id</span><span class="p">])</span> <span class="p">,</span><span class="n">ha</span><span class="o">=</span><span class="s">'center'</span><span class="p">,</span> <span class="n">va</span><span class="o">=</span><span class="s">'bottom'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="output_49_0.png" alt="png" /></p>

<h5 id="distribution--target-2">Distribution / target</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">col</span><span class="o">=</span><span class="s">'Pclass'</span>
<span class="n">gp</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">.</span><span class="n">groupby</span><span class="p">([</span><span class="n">col</span><span class="p">]).</span><span class="n">Survived</span><span class="p">.</span><span class="n">mean</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="n">bar</span><span class="p">(</span><span class="n">gp</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">str</span><span class="p">),</span> <span class="n">gp</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Avg Survived rate'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="n">col</span><span class="p">)</span>
<span class="k">for</span> <span class="nb">id</span> <span class="ow">in</span> <span class="n">gp</span><span class="p">.</span><span class="n">index</span><span class="p">:</span>
  <span class="n">plt</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="s">"{0:.0f}%"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">gp</span><span class="p">[</span><span class="nb">id</span><span class="p">]</span><span class="o">*</span><span class="mi">100</span><span class="p">),</span><span class="n">xy</span><span class="o">=</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="nb">id</span><span class="p">),</span> <span class="n">gp</span><span class="p">[</span><span class="nb">id</span><span class="p">])</span> 
  <span class="p">,</span><span class="n">ha</span><span class="o">=</span><span class="s">'center'</span><span class="p">,</span> <span class="n">va</span><span class="o">=</span><span class="s">'bottom'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="output_51_0.png" alt="png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sns</span><span class="p">.</span><span class="n">countplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span> <span class="n">col</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">,</span> <span class="n">hue</span> <span class="o">=</span> <span class="s">'Survived'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="s">'upper right'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="n">col</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="output_52_0.png" alt="png" /></p>

<p>Observations:</p>

<ul>
  <li>Better the Pclass is, greater is the survival rate. It comfirms our observation below on lowcost passenger</li>
</ul>

<h2 id="feature-engineering-1">Feature engineering 1</h2>

<p>Title / Familly / Alone / Connected Survival</p>

<h4 id="title">Title</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">df</span> <span class="ow">in</span> <span class="n">dfs</span><span class="p">:</span>
  <span class="n">df</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="s">'Title'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="s">'Name'</span><span class="p">].</span><span class="nb">str</span><span class="p">.</span><span class="n">extract</span><span class="p">(</span><span class="s">'([A-Za-z]+)\.'</span><span class="p">,</span> <span class="n">expand</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
  <span class="k">print</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="s">':'</span><span class="p">)</span>
  <span class="n">display</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="n">crosstab</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="s">'Title'</span><span class="p">],</span> <span class="n">df</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="s">'Sex'</span><span class="p">]))</span>
  <span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="se">\n\n</span><span class="s">'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>train :
</code></pre></div></div>

<div id="df-84953b82-4ff2-4eac-a054-e42ff8160971">
    <div class="colab-df-container">
      <div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th>Sex</th>
      <th>female</th>
      <th>male</th>
    </tr>
    <tr>
      <th>Title</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Capt</th>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>Col</th>
      <td>0</td>
      <td>2</td>
    </tr>
    <tr>
      <th>Countess</th>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>Don</th>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>Dr</th>
      <td>1</td>
      <td>6</td>
    </tr>
    <tr>
      <th>Jonkheer</th>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>Lady</th>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>Major</th>
      <td>0</td>
      <td>2</td>
    </tr>
    <tr>
      <th>Master</th>
      <td>0</td>
      <td>40</td>
    </tr>
    <tr>
      <th>Miss</th>
      <td>182</td>
      <td>0</td>
    </tr>
    <tr>
      <th>Mlle</th>
      <td>2</td>
      <td>0</td>
    </tr>
    <tr>
      <th>Mme</th>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>Mr</th>
      <td>0</td>
      <td>517</td>
    </tr>
    <tr>
      <th>Mrs</th>
      <td>125</td>
      <td>0</td>
    </tr>
    <tr>
      <th>Ms</th>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>Rev</th>
      <td>0</td>
      <td>6</td>
    </tr>
    <tr>
      <th>Sir</th>
      <td>0</td>
      <td>1</td>
    </tr>
  </tbody>
</table>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-84953b82-4ff2-4eac-a054-e42ff8160971')" title="Convert this dataframe to an interactive table." style="display:none;">

  &lt;svg xmlns="http://www.w3.org/2000/svg" height="24px"viewBox="0 0 24 24"
       width="24px"&gt;
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z" /><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z" />
  &lt;/svg&gt;
      </button>

  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-84953b82-4ff2-4eac-a054-e42ff8160971 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-84953b82-4ff2-4eac-a054-e42ff8160971');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>test :
</code></pre></div></div>

<div id="df-b5802eb8-05e2-4934-81a5-dae7729527d2">
    <div class="colab-df-container">
      <div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th>Sex</th>
      <th>female</th>
      <th>male</th>
    </tr>
    <tr>
      <th>Title</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Col</th>
      <td>0</td>
      <td>2</td>
    </tr>
    <tr>
      <th>Dona</th>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>Dr</th>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>Master</th>
      <td>0</td>
      <td>21</td>
    </tr>
    <tr>
      <th>Miss</th>
      <td>78</td>
      <td>0</td>
    </tr>
    <tr>
      <th>Mr</th>
      <td>0</td>
      <td>240</td>
    </tr>
    <tr>
      <th>Mrs</th>
      <td>72</td>
      <td>0</td>
    </tr>
    <tr>
      <th>Ms</th>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>Rev</th>
      <td>0</td>
      <td>2</td>
    </tr>
  </tbody>
</table>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-b5802eb8-05e2-4934-81a5-dae7729527d2')" title="Convert this dataframe to an interactive table." style="display:none;">

  &lt;svg xmlns="http://www.w3.org/2000/svg" height="24px"viewBox="0 0 24 24"
       width="24px"&gt;
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z" /><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z" />
  &lt;/svg&gt;
      </button>

  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-b5802eb8-05e2-4934-81a5-dae7729527d2 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-b5802eb8-05e2-4934-81a5-dae7729527d2');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">df</span> <span class="ow">in</span> <span class="n">dfs</span><span class="p">:</span>
  <span class="n">df</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="s">'Title'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="s">'Title'</span><span class="p">].</span><span class="n">replace</span><span class="p">([</span><span class="s">'Lady'</span><span class="p">,</span> <span class="s">'Countess'</span><span class="p">,</span><span class="s">'Capt'</span><span class="p">,</span> <span class="s">'Col'</span><span class="p">,</span>\
  <span class="s">'Don'</span><span class="p">,</span> <span class="s">'Dr'</span><span class="p">,</span> <span class="s">'Major'</span><span class="p">,</span> <span class="s">'Rev'</span><span class="p">,</span> <span class="s">'Sir'</span><span class="p">,</span> <span class="s">'Jonkheer'</span><span class="p">,</span> <span class="s">'Dona'</span><span class="p">],</span> <span class="s">'High'</span><span class="p">)</span>
  <span class="n">df</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="s">'Title'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="s">'Title'</span><span class="p">].</span><span class="n">replace</span><span class="p">(</span><span class="s">'Mlle'</span><span class="p">,</span> <span class="s">'Miss'</span><span class="p">)</span>
  <span class="n">df</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="s">'Title'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="s">'Title'</span><span class="p">].</span><span class="n">replace</span><span class="p">(</span><span class="s">'Ms'</span><span class="p">,</span> <span class="s">'Miss'</span><span class="p">)</span>
  <span class="n">df</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="s">'Title'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="s">'Title'</span><span class="p">].</span><span class="n">replace</span><span class="p">(</span><span class="s">'Mme'</span><span class="p">,</span> <span class="s">'Mrs'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">t</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">[</span><span class="s">'Title'</span><span class="p">].</span><span class="n">value_counts</span><span class="p">(</span><span class="n">sort</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span><span class="mi">6</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="n">bar</span><span class="p">(</span><span class="n">t</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="n">astype</span><span class="p">(</span><span class="s">'str'</span><span class="p">),</span> <span class="n">t</span><span class="p">.</span><span class="n">values</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'count'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Title'</span><span class="p">)</span>

<span class="k">for</span> <span class="nb">id</span> <span class="ow">in</span> <span class="n">t</span><span class="p">.</span><span class="n">index</span><span class="p">:</span>
  <span class="n">plt</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="s">"{0:.0f}%"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">t</span><span class="p">[</span><span class="nb">id</span><span class="p">]</span><span class="o">*</span><span class="mi">100</span><span class="o">/</span><span class="nb">sum</span><span class="p">(</span><span class="n">t</span><span class="p">)),</span><span class="n">xy</span><span class="o">=</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="nb">id</span><span class="p">),</span> <span class="n">t</span><span class="p">[</span><span class="nb">id</span><span class="p">])</span> <span class="p">,</span><span class="n">ha</span><span class="o">=</span><span class="s">'center'</span><span class="p">,</span> <span class="n">va</span><span class="o">=</span><span class="s">'bottom'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="output_58_0.png" alt="png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gp</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">.</span><span class="n">groupby</span><span class="p">([</span><span class="s">'Title'</span><span class="p">]).</span><span class="n">Survived</span><span class="p">.</span><span class="nb">sum</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="n">bar</span><span class="p">(</span><span class="n">gp</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">gp</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Cnt Survived'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Title'</span><span class="p">)</span>

<span class="k">for</span> <span class="nb">id</span> <span class="ow">in</span> <span class="n">gp</span><span class="p">.</span><span class="n">index</span><span class="p">:</span>
  <span class="n">plt</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="s">"{0:.0f}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">gp</span><span class="p">[</span><span class="nb">id</span><span class="p">]),</span><span class="n">xy</span><span class="o">=</span><span class="p">(</span><span class="nb">id</span><span class="p">,</span> <span class="n">gp</span><span class="p">[</span><span class="nb">id</span><span class="p">])</span> 
  <span class="p">,</span><span class="n">ha</span><span class="o">=</span><span class="s">'center'</span><span class="p">,</span> <span class="n">va</span><span class="o">=</span><span class="s">'bottom'</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="output_59_0.png" alt="png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gp</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">.</span><span class="n">groupby</span><span class="p">([</span><span class="s">'Title'</span><span class="p">]).</span><span class="n">Survived</span><span class="p">.</span><span class="n">mean</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="n">bar</span><span class="p">(</span><span class="n">gp</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">gp</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Avg Survived rate'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Title'</span><span class="p">)</span>

<span class="k">for</span> <span class="nb">id</span> <span class="ow">in</span> <span class="n">gp</span><span class="p">.</span><span class="n">index</span><span class="p">:</span>
  <span class="n">plt</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="s">"{0:.0f}%"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">gp</span><span class="p">[</span><span class="nb">id</span><span class="p">]</span><span class="o">*</span><span class="mi">100</span><span class="p">),</span><span class="n">xy</span><span class="o">=</span><span class="p">(</span><span class="nb">id</span><span class="p">,</span> <span class="n">gp</span><span class="p">[</span><span class="nb">id</span><span class="p">])</span> 
  <span class="p">,</span><span class="n">ha</span><span class="o">=</span><span class="s">'center'</span><span class="p">,</span> <span class="n">va</span><span class="o">=</span><span class="s">'bottom'</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="output_60_0.png" alt="png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">col</span><span class="o">=</span><span class="s">'Title'</span>
<span class="n">sns</span><span class="p">.</span><span class="n">countplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span> <span class="n">col</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">,</span> <span class="n">hue</span> <span class="o">=</span> <span class="s">'Survived'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="s">'upper right'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="n">col</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="output_61_0.png" alt="png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">nominal_cols</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">'Title'</span><span class="p">)</span>
</code></pre></div></div>

<p>Observations:</p>

<ul>
  <li>
    <p>Validating our previous observation female (Mrs, Miss) have much higher survival rate than male (Mr).</p>
  </li>
  <li>
    <p>Hight &amp; Master title have higher survival rate than Mr and a lower than female (Mrs, Miss)</p>
  </li>
</ul>

<h4 id="familly">Familly</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># error this passenger traveled alone
</span><span class="n">df_train</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="mi">273</span><span class="p">,</span> <span class="s">'Parch'</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">f</span><span class="p">,</span><span class="n">sub</span><span class="o">=</span><span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
<span class="n">i</span><span class="o">=</span><span class="mi">0</span>

<span class="k">for</span> <span class="n">df</span> <span class="ow">in</span> <span class="n">dfs</span><span class="p">:</span>
  <span class="n">df</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="s">'FamilySize'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="s">'SibSp'</span><span class="p">]</span> <span class="o">+</span> <span class="n">df</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="s">'Parch'</span><span class="p">]</span> <span class="o">+</span><span class="mi">1</span>
  <span class="n">sns</span><span class="p">.</span><span class="n">countplot</span><span class="p">(</span><span class="n">ax</span><span class="o">=</span><span class="n">sub</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">x</span><span class="o">=</span> <span class="s">'FamilySize'</span><span class="p">,</span><span class="n">data</span> <span class="o">=</span><span class="n">df</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
  <span class="n">sub</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">set_title</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
  <span class="n">i</span><span class="o">+=</span><span class="mi">1</span>

</code></pre></div></div>

<p><img src="output_66_0.png" alt="png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">t</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">[</span><span class="s">'FamilySize'</span><span class="p">].</span><span class="n">value_counts</span><span class="p">(</span><span class="n">sort</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span><span class="mi">6</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="n">bar</span><span class="p">(</span><span class="n">t</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="n">astype</span><span class="p">(</span><span class="s">'str'</span><span class="p">),</span> <span class="n">t</span><span class="p">.</span><span class="n">values</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'count'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'FamilySize'</span><span class="p">)</span>

<span class="k">for</span> <span class="nb">id</span> <span class="ow">in</span> <span class="n">t</span><span class="p">.</span><span class="n">index</span><span class="p">:</span>
  <span class="n">plt</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="s">"{0:.0f}%"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">t</span><span class="p">[</span><span class="nb">id</span><span class="p">]</span><span class="o">*</span><span class="mi">100</span><span class="o">/</span><span class="nb">sum</span><span class="p">(</span><span class="n">t</span><span class="p">)),</span><span class="n">xy</span><span class="o">=</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="nb">id</span><span class="p">),</span> <span class="n">t</span><span class="p">[</span><span class="nb">id</span><span class="p">])</span> <span class="p">,</span><span class="n">ha</span><span class="o">=</span><span class="s">'center'</span><span class="p">,</span> <span class="n">va</span><span class="o">=</span><span class="s">'bottom'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="output_67_0.png" alt="png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gp</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">.</span><span class="n">groupby</span><span class="p">([</span><span class="s">'FamilySize'</span><span class="p">]).</span><span class="n">Survived</span><span class="p">.</span><span class="nb">sum</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="n">bar</span><span class="p">(</span><span class="n">gp</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">gp</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Cnt Survived'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'FamilySize'</span><span class="p">)</span>

<span class="k">for</span> <span class="nb">id</span> <span class="ow">in</span> <span class="n">gp</span><span class="p">.</span><span class="n">index</span><span class="p">:</span>
  <span class="n">plt</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="s">"{0:.0f}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">gp</span><span class="p">[</span><span class="nb">id</span><span class="p">]),</span><span class="n">xy</span><span class="o">=</span><span class="p">(</span><span class="nb">id</span><span class="p">,</span> <span class="n">gp</span><span class="p">[</span><span class="nb">id</span><span class="p">])</span> 
  <span class="p">,</span><span class="n">ha</span><span class="o">=</span><span class="s">'center'</span><span class="p">,</span> <span class="n">va</span><span class="o">=</span><span class="s">'bottom'</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="output_68_0.png" alt="png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gp</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">.</span><span class="n">groupby</span><span class="p">([</span><span class="s">'FamilySize'</span><span class="p">]).</span><span class="n">Survived</span><span class="p">.</span><span class="n">mean</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="n">bar</span><span class="p">(</span><span class="n">gp</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="n">astype</span><span class="p">(</span><span class="s">'str'</span><span class="p">),</span> <span class="n">gp</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Avg Survived rate'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'FamilySize'</span><span class="p">)</span>

<span class="k">for</span> <span class="nb">id</span> <span class="ow">in</span> <span class="n">gp</span><span class="p">.</span><span class="n">index</span><span class="p">:</span>
  <span class="n">plt</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="s">"{0:.0f}%"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">gp</span><span class="p">[</span><span class="nb">id</span><span class="p">]</span><span class="o">*</span><span class="mi">100</span><span class="p">),</span><span class="n">xy</span><span class="o">=</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="nb">id</span><span class="p">),</span> <span class="n">gp</span><span class="p">[</span><span class="nb">id</span><span class="p">])</span> 
  <span class="p">,</span><span class="n">ha</span><span class="o">=</span><span class="s">'center'</span><span class="p">,</span> <span class="n">va</span><span class="o">=</span><span class="s">'bottom'</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="output_69_0.png" alt="png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">col</span><span class="o">=</span><span class="s">'FamilySize'</span>
<span class="n">sns</span><span class="p">.</span><span class="n">countplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span> <span class="n">col</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">,</span> <span class="n">hue</span> <span class="o">=</span> <span class="s">'Survived'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="s">'upper right'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="n">col</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="output_70_0.png" alt="png" /></p>

<p>Observations:</p>

<ul>
  <li>The survival rate increase with the familly size until 4 and decrease after</li>
</ul>

<h4 id="alone">Alone</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">df</span> <span class="ow">in</span> <span class="n">dfs</span><span class="p">:</span>
  <span class="n">df</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="s">'Alone'</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="n">df</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">loc</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="s">'FamilySize'</span><span class="p">]</span><span class="o">==</span><span class="mi">1</span><span class="p">,</span> <span class="s">'Alone'</span> <span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
  <span class="k">print</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="s">':'</span><span class="p">)</span>
  <span class="n">sns</span><span class="p">.</span><span class="n">countplot</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="s">'Alone'</span><span class="p">])</span>
  <span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
  <span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="se">\n\n</span><span class="s">'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>train :
</code></pre></div></div>

<p><img src="output_73_1.png" alt="png" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>test :
</code></pre></div></div>

<p><img src="output_73_3.png" alt="png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">t</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">[</span><span class="s">'Alone'</span><span class="p">].</span><span class="n">value_counts</span><span class="p">(</span><span class="n">sort</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="n">bar</span><span class="p">(</span><span class="n">t</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="n">astype</span><span class="p">(</span><span class="s">'str'</span><span class="p">),</span> <span class="n">t</span><span class="p">.</span><span class="n">values</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'count'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Alone'</span><span class="p">)</span>

<span class="k">for</span> <span class="nb">id</span> <span class="ow">in</span> <span class="n">t</span><span class="p">.</span><span class="n">index</span><span class="p">:</span>
  <span class="n">plt</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="s">"{0:.0f}%"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">t</span><span class="p">[</span><span class="nb">id</span><span class="p">]</span><span class="o">*</span><span class="mi">100</span><span class="o">/</span><span class="nb">sum</span><span class="p">(</span><span class="n">t</span><span class="p">)),</span><span class="n">xy</span><span class="o">=</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="nb">id</span><span class="p">),</span> <span class="n">t</span><span class="p">[</span><span class="nb">id</span><span class="p">])</span> <span class="p">,</span><span class="n">ha</span><span class="o">=</span><span class="s">'center'</span><span class="p">,</span> <span class="n">va</span><span class="o">=</span><span class="s">'bottom'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="output_74_0.png" alt="png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gp</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">.</span><span class="n">groupby</span><span class="p">([</span><span class="s">'Alone'</span><span class="p">]).</span><span class="n">Survived</span><span class="p">.</span><span class="nb">sum</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="n">bar</span><span class="p">(</span><span class="n">gp</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="n">astype</span><span class="p">(</span><span class="s">'str'</span><span class="p">),</span> <span class="n">gp</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Cnt Survived'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Alone'</span><span class="p">)</span>

<span class="k">for</span> <span class="nb">id</span> <span class="ow">in</span> <span class="n">gp</span><span class="p">.</span><span class="n">index</span><span class="p">:</span>
  <span class="n">plt</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="s">"{0:.0f}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">gp</span><span class="p">[</span><span class="nb">id</span><span class="p">]),</span><span class="n">xy</span><span class="o">=</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="nb">id</span><span class="p">),</span> <span class="n">gp</span><span class="p">[</span><span class="nb">id</span><span class="p">])</span> 
  <span class="p">,</span><span class="n">ha</span><span class="o">=</span><span class="s">'center'</span><span class="p">,</span> <span class="n">va</span><span class="o">=</span><span class="s">'bottom'</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="output_75_0.png" alt="png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gp</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">.</span><span class="n">groupby</span><span class="p">([</span><span class="s">'Alone'</span><span class="p">]).</span><span class="n">Survived</span><span class="p">.</span><span class="n">mean</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="n">bar</span><span class="p">(</span><span class="n">gp</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="n">astype</span><span class="p">(</span><span class="s">'str'</span><span class="p">),</span> <span class="n">gp</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Avg Survived rate'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Alone'</span><span class="p">)</span>

<span class="k">for</span> <span class="nb">id</span> <span class="ow">in</span> <span class="n">gp</span><span class="p">.</span><span class="n">index</span><span class="p">:</span>
  <span class="n">plt</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="s">"{0:.0f}%"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">gp</span><span class="p">[</span><span class="nb">id</span><span class="p">]</span><span class="o">*</span><span class="mi">100</span><span class="p">),</span><span class="n">xy</span><span class="o">=</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="nb">id</span><span class="p">),</span> <span class="n">gp</span><span class="p">[</span><span class="nb">id</span><span class="p">])</span> 
  <span class="p">,</span><span class="n">ha</span><span class="o">=</span><span class="s">'center'</span><span class="p">,</span> <span class="n">va</span><span class="o">=</span><span class="s">'bottom'</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="output_76_0.png" alt="png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">col</span><span class="o">=</span><span class="s">'Alone'</span>
<span class="n">sns</span><span class="p">.</span><span class="n">countplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span> <span class="n">col</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">,</span> <span class="n">hue</span> <span class="o">=</span> <span class="s">'Survived'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="s">'upper right'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="n">col</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="output_77_0.png" alt="png" /></p>

<p>Observations:</p>

<ul>
  <li>The survival rate is lower for alone passenger</li>
</ul>

<h4 id="last-name">Last Name</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">df</span> <span class="ow">in</span> <span class="n">dfs</span><span class="p">:</span>
  <span class="n">df</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="s">'Last_Name'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="s">'Name'</span><span class="p">].</span><span class="nb">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="nb">str</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="s">","</span><span class="p">)[</span><span class="mi">0</span><span class="p">])</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_train</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="s">'Name'</span><span class="p">).</span><span class="n">head</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div></div>

<div id="df-05c24dc0-c9c6-40bd-893f-3fee0675d12a">
    <div class="colab-df-container">
      <div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>PassengerId</th>
      <th>Survived</th>
      <th>Pclass</th>
      <th>Name</th>
      <th>Sex</th>
      <th>...</th>
      <th>Embarked</th>
      <th>Title</th>
      <th>FamilySize</th>
      <th>Alone</th>
      <th>Last_Name</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>845</th>
      <td>846</td>
      <td>0</td>
      <td>3</td>
      <td>Abbing, Mr. Anthony</td>
      <td>male</td>
      <td>...</td>
      <td>S</td>
      <td>Mr</td>
      <td>1</td>
      <td>1</td>
      <td>Abbing</td>
    </tr>
    <tr>
      <th>746</th>
      <td>747</td>
      <td>0</td>
      <td>3</td>
      <td>Abbott, Mr. Rossmore Edward</td>
      <td>male</td>
      <td>...</td>
      <td>S</td>
      <td>Mr</td>
      <td>3</td>
      <td>0</td>
      <td>Abbott</td>
    </tr>
    <tr>
      <th>279</th>
      <td>280</td>
      <td>1</td>
      <td>3</td>
      <td>Abbott, Mrs. Stanton (Rosa Hunt)</td>
      <td>female</td>
      <td>...</td>
      <td>S</td>
      <td>Mrs</td>
      <td>3</td>
      <td>0</td>
      <td>Abbott</td>
    </tr>
    <tr>
      <th>308</th>
      <td>309</td>
      <td>0</td>
      <td>2</td>
      <td>Abelson, Mr. Samuel</td>
      <td>male</td>
      <td>...</td>
      <td>C</td>
      <td>Mr</td>
      <td>2</td>
      <td>0</td>
      <td>Abelson</td>
    </tr>
    <tr>
      <th>874</th>
      <td>875</td>
      <td>1</td>
      <td>2</td>
      <td>Abelson, Mrs. Samuel (Hannah Wizosky)</td>
      <td>female</td>
      <td>...</td>
      <td>C</td>
      <td>Mrs</td>
      <td>2</td>
      <td>0</td>
      <td>Abelson</td>
    </tr>
    <tr>
      <th>365</th>
      <td>366</td>
      <td>0</td>
      <td>3</td>
      <td>Adahl, Mr. Mauritz Nils Martin</td>
      <td>male</td>
      <td>...</td>
      <td>S</td>
      <td>Mr</td>
      <td>1</td>
      <td>1</td>
      <td>Adahl</td>
    </tr>
    <tr>
      <th>401</th>
      <td>402</td>
      <td>0</td>
      <td>3</td>
      <td>Adams, Mr. John</td>
      <td>male</td>
      <td>...</td>
      <td>S</td>
      <td>Mr</td>
      <td>1</td>
      <td>1</td>
      <td>Adams</td>
    </tr>
    <tr>
      <th>40</th>
      <td>41</td>
      <td>0</td>
      <td>3</td>
      <td>Ahlin, Mrs. Johan (Johanna Persdotter Larsson)</td>
      <td>female</td>
      <td>...</td>
      <td>S</td>
      <td>Mrs</td>
      <td>2</td>
      <td>0</td>
      <td>Ahlin</td>
    </tr>
    <tr>
      <th>855</th>
      <td>856</td>
      <td>1</td>
      <td>3</td>
      <td>Aks, Mrs. Sam (Leah Rosen)</td>
      <td>female</td>
      <td>...</td>
      <td>S</td>
      <td>Mrs</td>
      <td>2</td>
      <td>0</td>
      <td>Aks</td>
    </tr>
    <tr>
      <th>207</th>
      <td>208</td>
      <td>1</td>
      <td>3</td>
      <td>Albimona, Mr. Nassef Cassem</td>
      <td>male</td>
      <td>...</td>
      <td>C</td>
      <td>Mr</td>
      <td>1</td>
      <td>1</td>
      <td>Albimona</td>
    </tr>
  </tbody>
</table>
<p>10 rows Ã 15 columns</p>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-05c24dc0-c9c6-40bd-893f-3fee0675d12a')" title="Convert this dataframe to an interactive table." style="display:none;">

  &lt;svg xmlns="http://www.w3.org/2000/svg" height="24px"viewBox="0 0 24 24"
       width="24px"&gt;
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z" /><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z" />
  &lt;/svg&gt;
      </button>

  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-05c24dc0-c9c6-40bd-893f-3fee0675d12a button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-05c24dc0-c9c6-40bd-893f-3fee0675d12a');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>

<h4 id="familly-id">Familly id</h4>

<p>We will try to group famillies</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_test</span><span class="p">[</span><span class="s">'Survived'</span><span class="p">]</span> <span class="o">=</span> <span class="mi">9</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_full</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">concat</span><span class="p">([</span><span class="n">df_train</span><span class="p">,</span> <span class="n">df_test</span><span class="p">],</span> <span class="n">axis</span> <span class="o">=</span> <span class="mi">0</span><span class="p">).</span><span class="n">sort_values</span><span class="p">(</span><span class="s">'Name'</span><span class="p">).</span><span class="n">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">df_full</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div id="df-27a5945b-5c4a-4e8b-acb1-54106fcf29a0">
    <div class="colab-df-container">
      <div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>PassengerId</th>
      <th>Survived</th>
      <th>Pclass</th>
      <th>Name</th>
      <th>Sex</th>
      <th>...</th>
      <th>Embarked</th>
      <th>Title</th>
      <th>FamilySize</th>
      <th>Alone</th>
      <th>Last_Name</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>846</td>
      <td>0</td>
      <td>3</td>
      <td>Abbing, Mr. Anthony</td>
      <td>male</td>
      <td>...</td>
      <td>S</td>
      <td>Mr</td>
      <td>1</td>
      <td>1</td>
      <td>Abbing</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1284</td>
      <td>9</td>
      <td>3</td>
      <td>Abbott, Master. Eugene Joseph</td>
      <td>male</td>
      <td>...</td>
      <td>S</td>
      <td>Master</td>
      <td>3</td>
      <td>0</td>
      <td>Abbott</td>
    </tr>
    <tr>
      <th>2</th>
      <td>747</td>
      <td>0</td>
      <td>3</td>
      <td>Abbott, Mr. Rossmore Edward</td>
      <td>male</td>
      <td>...</td>
      <td>S</td>
      <td>Mr</td>
      <td>3</td>
      <td>0</td>
      <td>Abbott</td>
    </tr>
    <tr>
      <th>3</th>
      <td>280</td>
      <td>1</td>
      <td>3</td>
      <td>Abbott, Mrs. Stanton (Rosa Hunt)</td>
      <td>female</td>
      <td>...</td>
      <td>S</td>
      <td>Mrs</td>
      <td>3</td>
      <td>0</td>
      <td>Abbott</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1237</td>
      <td>9</td>
      <td>3</td>
      <td>Abelseth, Miss. Karen Marie</td>
      <td>female</td>
      <td>...</td>
      <td>S</td>
      <td>Miss</td>
      <td>1</td>
      <td>1</td>
      <td>Abelseth</td>
    </tr>
  </tbody>
</table>
<p>5 rows Ã 15 columns</p>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-27a5945b-5c4a-4e8b-acb1-54106fcf29a0')" title="Convert this dataframe to an interactive table." style="display:none;">

  &lt;svg xmlns="http://www.w3.org/2000/svg" height="24px"viewBox="0 0 24 24"
       width="24px"&gt;
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z" /><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z" />
  &lt;/svg&gt;
      </button>

  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-27a5945b-5c4a-4e8b-acb1-54106fcf29a0 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-27a5945b-5c4a-4e8b-acb1-54106fcf29a0');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>

<h5 id="group-by-ticket--familly-size">Group by ticket / Familly size</h5>

<p>People with the same ticket and the same family size are supposed to be in the same family</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_sub_full</span> <span class="o">=</span> <span class="n">df_full</span><span class="p">[[</span><span class="s">'PassengerId'</span><span class="p">,</span> <span class="s">'FamilySize'</span><span class="p">,</span> <span class="s">'Alone'</span><span class="p">,</span> <span class="s">'Ticket'</span><span class="p">]]</span>
<span class="n">gb_Tick_FamSize</span> <span class="o">=</span> <span class="n">df_sub_full</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">df_sub_full</span><span class="p">[</span><span class="s">'Alone'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">].</span><span class="n">groupby</span><span class="p">([</span><span class="s">'Ticket'</span><span class="p">,</span><span class="s">'FamilySize'</span><span class="p">]).</span><span class="n">count</span><span class="p">()</span>
<span class="n">gb_Tick_FamSize</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div id="df-3ac14aea-5df4-402c-a233-cf9417b3f3db">
    <div class="colab-df-container">
      <div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th></th>
      <th>PassengerId</th>
      <th>Alone</th>
    </tr>
    <tr>
      <th>Ticket</th>
      <th>FamilySize</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>110413</th>
      <th>3</th>
      <td>3</td>
      <td>3</td>
    </tr>
    <tr>
      <th>110813</th>
      <th>2</th>
      <td>2</td>
      <td>2</td>
    </tr>
    <tr>
      <th>111361</th>
      <th>2</th>
      <td>2</td>
      <td>2</td>
    </tr>
    <tr>
      <th>112378</th>
      <th>2</th>
      <td>2</td>
      <td>2</td>
    </tr>
    <tr>
      <th>112901</th>
      <th>3</th>
      <td>1</td>
      <td>1</td>
    </tr>
  </tbody>
</table>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-3ac14aea-5df4-402c-a233-cf9417b3f3db')" title="Convert this dataframe to an interactive table." style="display:none;">

  &lt;svg xmlns="http://www.w3.org/2000/svg" height="24px"viewBox="0 0 24 24"
       width="24px"&gt;
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z" /><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z" />
  &lt;/svg&gt;
      </button>

  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-3ac14aea-5df4-402c-a233-cf9417b3f3db button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-3ac14aea-5df4-402c-a233-cf9417b3f3db');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gb_Tick_FamSize</span><span class="p">.</span><span class="n">reset_index</span><span class="p">(</span><span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">gb_Tick_FamSize</span><span class="p">.</span><span class="n">drop</span><span class="p">([</span><span class="s">'Alone'</span><span class="p">],</span> <span class="n">axis</span> <span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span> <span class="p">)</span>
<span class="n">gb_Tick_FamSize</span><span class="p">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="s">'PassengerId'</span><span class="p">:</span><span class="s">'CntPassengerId'</span><span class="p">},</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">gb_Tick_FamSize</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">gb_Tick_FamSize</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Families where the group by count = Family size
</span><span class="n">fam_id_table</span> <span class="o">=</span> <span class="n">gb_Tick_FamSize</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">gb_Tick_FamSize</span><span class="p">[</span><span class="s">'FamilySize'</span><span class="p">]</span> <span class="o">==</span> <span class="n">gb_Tick_FamSize</span><span class="p">[</span><span class="s">'CntPassengerId'</span><span class="p">]]</span>
<span class="n">fam_id_table</span><span class="p">[</span><span class="s">'Familly_id'</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">fam_id_table</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
<span class="n">fam_id_table</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div id="df-e878e9d7-dfc5-4663-992d-a108601186d6">
    <div class="colab-df-container">
      <div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Ticket</th>
      <th>FamilySize</th>
      <th>CntPassengerId</th>
      <th>Familly_id</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>110413</td>
      <td>3</td>
      <td>3</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1</th>
      <td>110813</td>
      <td>2</td>
      <td>2</td>
      <td>2</td>
    </tr>
    <tr>
      <th>2</th>
      <td>111361</td>
      <td>2</td>
      <td>2</td>
      <td>3</td>
    </tr>
    <tr>
      <th>3</th>
      <td>112378</td>
      <td>2</td>
      <td>2</td>
      <td>4</td>
    </tr>
    <tr>
      <th>5</th>
      <td>113503</td>
      <td>3</td>
      <td>3</td>
      <td>5</td>
    </tr>
  </tbody>
</table>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-e878e9d7-dfc5-4663-992d-a108601186d6')" title="Convert this dataframe to an interactive table." style="display:none;">

  &lt;svg xmlns="http://www.w3.org/2000/svg" height="24px"viewBox="0 0 24 24"
       width="24px"&gt;
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z" /><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z" />
  &lt;/svg&gt;
      </button>

  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-e878e9d7-dfc5-4663-992d-a108601186d6 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-e878e9d7-dfc5-4663-992d-a108601186d6');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>

<p><strong>We will join the 2 tables</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_full</span> <span class="o">=</span> <span class="n">df_full</span><span class="p">.</span><span class="n">merge</span><span class="p">(</span><span class="n">fam_id_table</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="s">'left'</span> <span class="p">,</span><span class="n">on</span><span class="o">=</span><span class="p">[</span><span class="s">'Ticket'</span><span class="p">,</span> <span class="s">'FamilySize'</span><span class="p">])</span>
<span class="n">df_full</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="s">'CntPassengerId'</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">df_full</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div id="df-9b24f63f-9770-4726-a644-7e862d15e0eb">
    <div class="colab-df-container">
      <div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>PassengerId</th>
      <th>Survived</th>
      <th>Pclass</th>
      <th>Name</th>
      <th>Sex</th>
      <th>...</th>
      <th>Title</th>
      <th>FamilySize</th>
      <th>Alone</th>
      <th>Last_Name</th>
      <th>Familly_id</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>846</td>
      <td>0</td>
      <td>3</td>
      <td>Abbing, Mr. Anthony</td>
      <td>male</td>
      <td>...</td>
      <td>Mr</td>
      <td>1</td>
      <td>1</td>
      <td>Abbing</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1284</td>
      <td>9</td>
      <td>3</td>
      <td>Abbott, Master. Eugene Joseph</td>
      <td>male</td>
      <td>...</td>
      <td>Master</td>
      <td>3</td>
      <td>0</td>
      <td>Abbott</td>
      <td>114.00</td>
    </tr>
    <tr>
      <th>2</th>
      <td>747</td>
      <td>0</td>
      <td>3</td>
      <td>Abbott, Mr. Rossmore Edward</td>
      <td>male</td>
      <td>...</td>
      <td>Mr</td>
      <td>3</td>
      <td>0</td>
      <td>Abbott</td>
      <td>114.00</td>
    </tr>
    <tr>
      <th>3</th>
      <td>280</td>
      <td>1</td>
      <td>3</td>
      <td>Abbott, Mrs. Stanton (Rosa Hunt)</td>
      <td>female</td>
      <td>...</td>
      <td>Mrs</td>
      <td>3</td>
      <td>0</td>
      <td>Abbott</td>
      <td>114.00</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1237</td>
      <td>9</td>
      <td>3</td>
      <td>Abelseth, Miss. Karen Marie</td>
      <td>female</td>
      <td>...</td>
      <td>Miss</td>
      <td>1</td>
      <td>1</td>
      <td>Abelseth</td>
      <td>nan</td>
    </tr>
  </tbody>
</table>
<p>5 rows Ã 16 columns</p>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-9b24f63f-9770-4726-a644-7e862d15e0eb')" title="Convert this dataframe to an interactive table." style="display:none;">

  &lt;svg xmlns="http://www.w3.org/2000/svg" height="24px"viewBox="0 0 24 24"
       width="24px"&gt;
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z" /><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z" />
  &lt;/svg&gt;
      </button>

  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-9b24f63f-9770-4726-a644-7e862d15e0eb button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-9b24f63f-9770-4726-a644-7e862d15e0eb');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>

<h5 id="group-by-last_name--familly-size--pclass">Group by Last_Name / Familly size / Pclass</h5>

<p>People with the same last name, familly size and Pclass are supposed to be in the same family</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_sub_full</span> <span class="o">=</span> <span class="n">df_full</span><span class="p">[[</span><span class="s">'PassengerId'</span><span class="p">,</span> <span class="s">'FamilySize'</span><span class="p">,</span> <span class="s">'Alone'</span><span class="p">,</span><span class="s">'Last_Name'</span><span class="p">,</span><span class="s">'Pclass'</span> <span class="p">,</span><span class="s">'Familly_id'</span><span class="p">]]</span>
<span class="n">gb_LastName_FamSize_PCl</span> <span class="o">=</span> <span class="n">df_sub_full</span><span class="p">.</span><span class="n">loc</span><span class="p">[(</span><span class="n">df_sub_full</span><span class="p">[</span><span class="s">'Alone'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">df_sub_full</span><span class="p">[</span><span class="s">'Familly_id'</span><span class="p">].</span><span class="n">isnull</span><span class="p">())].</span><span class="n">groupby</span><span class="p">([</span><span class="s">'Last_Name'</span><span class="p">,</span> <span class="s">'FamilySize'</span><span class="p">,</span> <span class="s">'Pclass'</span><span class="p">]).</span><span class="n">count</span><span class="p">()</span>
<span class="n">gb_LastName_FamSize_PCl</span><span class="p">.</span><span class="n">reset_index</span><span class="p">(</span><span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">gb_LastName_FamSize_PCl</span><span class="p">.</span><span class="n">drop</span><span class="p">([</span><span class="s">'Alone'</span><span class="p">,</span> <span class="s">'Familly_id'</span><span class="p">],</span> <span class="n">axis</span> <span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">gb_LastName_FamSize_PCl</span><span class="p">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="s">'PassengerId'</span><span class="p">:</span><span class="s">'CntPassengerId'</span><span class="p">},</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Families where the group by count = Family size
</span><span class="n">fam_id_table_2</span> <span class="o">=</span> <span class="n">gb_LastName_FamSize_PCl</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">gb_LastName_FamSize_PCl</span><span class="p">[</span><span class="s">'FamilySize'</span><span class="p">]</span> <span class="o">==</span> <span class="n">gb_LastName_FamSize_PCl</span><span class="p">[</span><span class="s">'CntPassengerId'</span><span class="p">]]</span>
<span class="n">fam_id_table_2</span><span class="p">[</span><span class="s">'Familly_id'</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">fam_id_table</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">fam_id_table</span><span class="p">)</span><span class="o">+</span> <span class="nb">len</span><span class="p">(</span><span class="n">fam_id_table_2</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
<span class="n">fam_id_table_2</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div id="df-d53f0f95-8528-4604-b5a6-fe95294d5c2a">
    <div class="colab-df-container">
      <div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Last_Name</th>
      <th>FamilySize</th>
      <th>Pclass</th>
      <th>CntPassengerId</th>
      <th>Familly_id</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>7</th>
      <td>Bourke</td>
      <td>3</td>
      <td>3</td>
      <td>3</td>
      <td>153</td>
    </tr>
    <tr>
      <th>8</th>
      <td>Braund</td>
      <td>2</td>
      <td>3</td>
      <td>2</td>
      <td>154</td>
    </tr>
    <tr>
      <th>12</th>
      <td>Crosby</td>
      <td>3</td>
      <td>1</td>
      <td>3</td>
      <td>155</td>
    </tr>
    <tr>
      <th>15</th>
      <td>Davies</td>
      <td>3</td>
      <td>3</td>
      <td>3</td>
      <td>156</td>
    </tr>
    <tr>
      <th>17</th>
      <td>Duff Gordon</td>
      <td>2</td>
      <td>1</td>
      <td>2</td>
      <td>157</td>
    </tr>
  </tbody>
</table>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-d53f0f95-8528-4604-b5a6-fe95294d5c2a')" title="Convert this dataframe to an interactive table." style="display:none;">

  &lt;svg xmlns="http://www.w3.org/2000/svg" height="24px"viewBox="0 0 24 24"
       width="24px"&gt;
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z" /><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z" />
  &lt;/svg&gt;
      </button>

  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-d53f0f95-8528-4604-b5a6-fe95294d5c2a button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-d53f0f95-8528-4604-b5a6-fe95294d5c2a');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_full</span> <span class="o">=</span> <span class="n">df_full</span><span class="p">.</span><span class="n">merge</span><span class="p">(</span><span class="n">fam_id_table_2</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="s">'left'</span> <span class="p">,</span><span class="n">on</span><span class="o">=</span><span class="p">[</span><span class="s">'Last_Name'</span><span class="p">,</span> <span class="s">'FamilySize'</span><span class="p">,</span> <span class="s">'Pclass'</span><span class="p">])</span>
<span class="n">df_full</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="s">'CntPassengerId'</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">df_full</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div id="df-8f35f47b-32e6-4fb8-921d-935046194800">
    <div class="colab-df-container">
      <div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>PassengerId</th>
      <th>Survived</th>
      <th>Pclass</th>
      <th>Name</th>
      <th>Sex</th>
      <th>...</th>
      <th>FamilySize</th>
      <th>Alone</th>
      <th>Last_Name</th>
      <th>Familly_id_x</th>
      <th>Familly_id_y</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>846</td>
      <td>0</td>
      <td>3</td>
      <td>Abbing, Mr. Anthony</td>
      <td>male</td>
      <td>...</td>
      <td>1</td>
      <td>1</td>
      <td>Abbing</td>
      <td>nan</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1284</td>
      <td>9</td>
      <td>3</td>
      <td>Abbott, Master. Eugene Joseph</td>
      <td>male</td>
      <td>...</td>
      <td>3</td>
      <td>0</td>
      <td>Abbott</td>
      <td>114.00</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>2</th>
      <td>747</td>
      <td>0</td>
      <td>3</td>
      <td>Abbott, Mr. Rossmore Edward</td>
      <td>male</td>
      <td>...</td>
      <td>3</td>
      <td>0</td>
      <td>Abbott</td>
      <td>114.00</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>3</th>
      <td>280</td>
      <td>1</td>
      <td>3</td>
      <td>Abbott, Mrs. Stanton (Rosa Hunt)</td>
      <td>female</td>
      <td>...</td>
      <td>3</td>
      <td>0</td>
      <td>Abbott</td>
      <td>114.00</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1237</td>
      <td>9</td>
      <td>3</td>
      <td>Abelseth, Miss. Karen Marie</td>
      <td>female</td>
      <td>...</td>
      <td>1</td>
      <td>1</td>
      <td>Abelseth</td>
      <td>nan</td>
      <td>nan</td>
    </tr>
  </tbody>
</table>
<p>5 rows Ã 17 columns</p>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-8f35f47b-32e6-4fb8-921d-935046194800')" title="Convert this dataframe to an interactive table." style="display:none;">

  &lt;svg xmlns="http://www.w3.org/2000/svg" height="24px"viewBox="0 0 24 24"
       width="24px"&gt;
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z" /><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z" />
  &lt;/svg&gt;
      </button>

  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-8f35f47b-32e6-4fb8-921d-935046194800 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-8f35f47b-32e6-4fb8-921d-935046194800');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_full</span><span class="p">.</span><span class="n">loc</span><span class="p">[(</span><span class="n">df_full</span><span class="p">.</span><span class="n">Familly_id_y</span><span class="p">.</span><span class="n">notnull</span><span class="p">())</span> <span class="o">|</span> <span class="p">(</span><span class="n">df_full</span><span class="p">.</span><span class="n">Familly_id_x</span><span class="p">.</span><span class="n">notnull</span><span class="p">())].</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div id="df-a076cef3-3bb3-4196-a972-153c0676e56d">
    <div class="colab-df-container">
      <div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>PassengerId</th>
      <th>Survived</th>
      <th>Pclass</th>
      <th>Name</th>
      <th>Sex</th>
      <th>...</th>
      <th>FamilySize</th>
      <th>Alone</th>
      <th>Last_Name</th>
      <th>Familly_id_x</th>
      <th>Familly_id_y</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1</th>
      <td>1284</td>
      <td>9</td>
      <td>3</td>
      <td>Abbott, Master. Eugene Joseph</td>
      <td>male</td>
      <td>...</td>
      <td>3</td>
      <td>0</td>
      <td>Abbott</td>
      <td>114.00</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>2</th>
      <td>747</td>
      <td>0</td>
      <td>3</td>
      <td>Abbott, Mr. Rossmore Edward</td>
      <td>male</td>
      <td>...</td>
      <td>3</td>
      <td>0</td>
      <td>Abbott</td>
      <td>114.00</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>3</th>
      <td>280</td>
      <td>1</td>
      <td>3</td>
      <td>Abbott, Mrs. Stanton (Rosa Hunt)</td>
      <td>female</td>
      <td>...</td>
      <td>3</td>
      <td>0</td>
      <td>Abbott</td>
      <td>114.00</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>6</th>
      <td>309</td>
      <td>0</td>
      <td>2</td>
      <td>Abelson, Mr. Samuel</td>
      <td>male</td>
      <td>...</td>
      <td>2</td>
      <td>0</td>
      <td>Abelson</td>
      <td>122.00</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>7</th>
      <td>875</td>
      <td>1</td>
      <td>2</td>
      <td>Abelson, Mrs. Samuel (Hannah Wizosky)</td>
      <td>female</td>
      <td>...</td>
      <td>2</td>
      <td>0</td>
      <td>Abelson</td>
      <td>122.00</td>
      <td>nan</td>
    </tr>
  </tbody>
</table>
<p>5 rows Ã 17 columns</p>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-a076cef3-3bb3-4196-a972-153c0676e56d')" title="Convert this dataframe to an interactive table." style="display:none;">

  &lt;svg xmlns="http://www.w3.org/2000/svg" height="24px"viewBox="0 0 24 24"
       width="24px"&gt;
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z" /><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z" />
  &lt;/svg&gt;
      </button>

  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-a076cef3-3bb3-4196-a972-153c0676e56d button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-a076cef3-3bb3-4196-a972-153c0676e56d');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_full</span><span class="p">.</span><span class="n">loc</span><span class="p">[(</span><span class="n">df_full</span><span class="p">.</span><span class="n">Alone</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)].</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div id="df-481c4a53-69e0-4b33-9a16-ec4afa6a1ffb">
    <div class="colab-df-container">
      <div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>PassengerId</th>
      <th>Survived</th>
      <th>Pclass</th>
      <th>Name</th>
      <th>Sex</th>
      <th>...</th>
      <th>FamilySize</th>
      <th>Alone</th>
      <th>Last_Name</th>
      <th>Familly_id_x</th>
      <th>Familly_id_y</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1</th>
      <td>1284</td>
      <td>9</td>
      <td>3</td>
      <td>Abbott, Master. Eugene Joseph</td>
      <td>male</td>
      <td>...</td>
      <td>3</td>
      <td>0</td>
      <td>Abbott</td>
      <td>114.00</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>2</th>
      <td>747</td>
      <td>0</td>
      <td>3</td>
      <td>Abbott, Mr. Rossmore Edward</td>
      <td>male</td>
      <td>...</td>
      <td>3</td>
      <td>0</td>
      <td>Abbott</td>
      <td>114.00</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>3</th>
      <td>280</td>
      <td>1</td>
      <td>3</td>
      <td>Abbott, Mrs. Stanton (Rosa Hunt)</td>
      <td>female</td>
      <td>...</td>
      <td>3</td>
      <td>0</td>
      <td>Abbott</td>
      <td>114.00</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>6</th>
      <td>309</td>
      <td>0</td>
      <td>2</td>
      <td>Abelson, Mr. Samuel</td>
      <td>male</td>
      <td>...</td>
      <td>2</td>
      <td>0</td>
      <td>Abelson</td>
      <td>122.00</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>7</th>
      <td>875</td>
      <td>1</td>
      <td>2</td>
      <td>Abelson, Mrs. Samuel (Hannah Wizosky)</td>
      <td>female</td>
      <td>...</td>
      <td>2</td>
      <td>0</td>
      <td>Abelson</td>
      <td>122.00</td>
      <td>nan</td>
    </tr>
  </tbody>
</table>
<p>5 rows Ã 17 columns</p>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-481c4a53-69e0-4b33-9a16-ec4afa6a1ffb')" title="Convert this dataframe to an interactive table." style="display:none;">

  &lt;svg xmlns="http://www.w3.org/2000/svg" height="24px"viewBox="0 0 24 24"
       width="24px"&gt;
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z" /><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z" />
  &lt;/svg&gt;
      </button>

  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-481c4a53-69e0-4b33-9a16-ec4afa6a1ffb button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-481c4a53-69e0-4b33-9a16-ec4afa6a1ffb');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sub</span> <span class="o">=</span> <span class="n">df_full</span><span class="p">.</span><span class="n">loc</span><span class="p">[(</span><span class="n">df_full</span><span class="p">.</span><span class="n">Alone</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)]</span>
<span class="n">pd</span><span class="p">.</span><span class="n">set_option</span><span class="p">(</span><span class="s">'display.max_columns'</span><span class="p">,</span> <span class="mi">500</span><span class="p">)</span>
<span class="n">pd</span><span class="p">.</span><span class="n">set_option</span><span class="p">(</span><span class="s">'display.max_rows'</span><span class="p">,</span> <span class="mi">500</span><span class="p">)</span>
<span class="n">sub</span><span class="p">.</span><span class="n">loc</span><span class="p">[(</span><span class="n">sub</span><span class="p">.</span><span class="n">Familly_id_y</span><span class="p">.</span><span class="n">isnull</span><span class="p">())</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">sub</span><span class="p">.</span><span class="n">Familly_id_x</span><span class="p">.</span><span class="n">isnull</span><span class="p">())].</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div id="df-471d1ca5-3ee3-4d2c-9e9f-09165f39b7b5">
    <div class="colab-df-container">
      <div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>PassengerId</th>
      <th>Survived</th>
      <th>Pclass</th>
      <th>Name</th>
      <th>Sex</th>
      <th>Age</th>
      <th>SibSp</th>
      <th>Parch</th>
      <th>Ticket</th>
      <th>Fare</th>
      <th>Embarked</th>
      <th>Title</th>
      <th>FamilySize</th>
      <th>Alone</th>
      <th>Last_Name</th>
      <th>Familly_id_x</th>
      <th>Familly_id_y</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>12</th>
      <td>41</td>
      <td>0</td>
      <td>3</td>
      <td>Ahlin, Mrs. Johan (Johanna Persdotter Larsson)</td>
      <td>female</td>
      <td>40.00</td>
      <td>1</td>
      <td>0</td>
      <td>7546</td>
      <td>9.47</td>
      <td>S</td>
      <td>Mrs</td>
      <td>2</td>
      <td>0</td>
      <td>Ahlin</td>
      <td>nan</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>29</th>
      <td>193</td>
      <td>1</td>
      <td>3</td>
      <td>Andersen-Jensen, Miss. Carla Christine Nielsine</td>
      <td>female</td>
      <td>19.00</td>
      <td>1</td>
      <td>0</td>
      <td>350046</td>
      <td>7.85</td>
      <td>S</td>
      <td>Miss</td>
      <td>2</td>
      <td>0</td>
      <td>Andersen-Jensen</td>
      <td>nan</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>34</th>
      <td>69</td>
      <td>1</td>
      <td>3</td>
      <td>Andersson, Miss. Erna Alexandra</td>
      <td>female</td>
      <td>17.00</td>
      <td>4</td>
      <td>2</td>
      <td>3101281</td>
      <td>7.92</td>
      <td>S</td>
      <td>Miss</td>
      <td>7</td>
      <td>0</td>
      <td>Andersson</td>
      <td>nan</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>35</th>
      <td>1106</td>
      <td>9</td>
      <td>3</td>
      <td>Andersson, Miss. Ida Augusta Margareta</td>
      <td>female</td>
      <td>38.00</td>
      <td>4</td>
      <td>2</td>
      <td>347091</td>
      <td>7.78</td>
      <td>S</td>
      <td>Miss</td>
      <td>7</td>
      <td>0</td>
      <td>Andersson</td>
      <td>nan</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>50</th>
      <td>572</td>
      <td>1</td>
      <td>1</td>
      <td>Appleton, Mrs. Edward Dale (Charlotte Lamson)</td>
      <td>female</td>
      <td>53.00</td>
      <td>2</td>
      <td>0</td>
      <td>11769</td>
      <td>51.48</td>
      <td>S</td>
      <td>Mrs</td>
      <td>3</td>
      <td>0</td>
      <td>Appleton</td>
      <td>nan</td>
      <td>nan</td>
    </tr>
  </tbody>
</table>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-471d1ca5-3ee3-4d2c-9e9f-09165f39b7b5')" title="Convert this dataframe to an interactive table." style="display:none;">

  &lt;svg xmlns="http://www.w3.org/2000/svg" height="24px"viewBox="0 0 24 24"
       width="24px"&gt;
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z" /><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z" />
  &lt;/svg&gt;
      </button>

  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-471d1ca5-3ee3-4d2c-9e9f-09165f39b7b5 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-471d1ca5-3ee3-4d2c-9e9f-09165f39b7b5');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>

<p>For this 65 people I will do manual search on internet</p>

<h5 id="manual-search">MANUAL SEARCH</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cnt_fam_id</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">fam_id_table</span><span class="p">)</span><span class="o">+</span> <span class="nb">len</span><span class="p">(</span><span class="n">fam_id_table_2</span><span class="p">)</span>
<span class="n">cnt_fam_id</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>171
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_full</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Last_Name'</span><span class="p">]</span> <span class="o">==</span> <span class="s">'Ahlin'</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Last_Name'</span><span class="p">]</span> <span class="o">==</span> <span class="s">'Petterson'</span><span class="p">),</span> <span class="s">'Familly_id_z'</span> <span class="p">]</span> <span class="o">=</span> <span class="n">cnt_fam_id</span>
<span class="n">cnt_fam_id</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sub</span> <span class="o">=</span> <span class="n">df_full</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Last_Name'</span><span class="p">]</span> <span class="o">==</span> <span class="s">'Andersen-Jensen'</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Last_Name'</span><span class="p">]</span> <span class="o">==</span> <span class="s">'Jensen'</span><span class="p">)]</span>
<span class="n">idx</span> <span class="o">=</span> <span class="n">sub</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">sub</span><span class="p">[</span><span class="s">'Alone'</span><span class="p">]</span><span class="o">!=</span> <span class="mi">1</span><span class="p">].</span><span class="n">index</span>
<span class="n">df_full</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span> <span class="s">'Familly_id_z'</span><span class="p">]</span> <span class="o">=</span> <span class="n">cnt_fam_id</span> 
<span class="n">cnt_fam_id</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sub</span> <span class="o">=</span> <span class="n">df_full</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Last_Name'</span><span class="p">]</span> <span class="o">==</span> <span class="s">'Andersson'</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Last_Name'</span><span class="p">]</span> <span class="o">==</span> <span class="s">'Backstrom'</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Last_Name'</span><span class="p">]</span> <span class="o">==</span> <span class="s">'Gustafsson'</span><span class="p">)]</span>
<span class="n">sub</span> <span class="o">=</span> <span class="n">sub</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">sub</span><span class="p">[</span><span class="s">'Alone'</span><span class="p">]</span><span class="o">!=</span> <span class="mi">1</span><span class="p">]</span>
<span class="n">idx</span> <span class="o">=</span> <span class="n">sub</span><span class="p">.</span><span class="n">loc</span><span class="p">[(</span><span class="n">sub</span><span class="p">.</span><span class="n">Familly_id_y</span><span class="p">.</span><span class="n">isnull</span><span class="p">())</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">sub</span><span class="p">.</span><span class="n">Familly_id_x</span><span class="p">.</span><span class="n">isnull</span><span class="p">())</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">sub</span><span class="p">.</span><span class="n">Familly_id_z</span><span class="p">.</span><span class="n">isnull</span><span class="p">())].</span><span class="n">index</span>
<span class="n">df_full</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span> <span class="s">'Familly_id_z'</span><span class="p">]</span> <span class="o">=</span> <span class="n">cnt_fam_id</span> 
<span class="n">cnt_fam_id</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sub</span> <span class="o">=</span> <span class="n">df_full</span><span class="p">.</span><span class="n">loc</span><span class="p">[(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Last_Name'</span><span class="p">]</span> <span class="o">==</span> <span class="s">'Appleton'</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Last_Name'</span><span class="p">]</span> <span class="o">==</span> <span class="s">'Brown'</span><span class="p">)</span>  <span class="o">|</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Last_Name'</span><span class="p">]</span> <span class="o">==</span> <span class="s">'Cornell'</span><span class="p">)</span> <span class="p">]</span> 
<span class="n">sub</span> <span class="o">=</span> <span class="n">sub</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">sub</span><span class="p">[</span><span class="s">'Alone'</span><span class="p">]</span><span class="o">!=</span> <span class="mi">1</span><span class="p">]</span>
<span class="n">idx</span> <span class="o">=</span> <span class="n">sub</span><span class="p">.</span><span class="n">loc</span><span class="p">[(</span><span class="n">sub</span><span class="p">.</span><span class="n">Familly_id_y</span><span class="p">.</span><span class="n">isnull</span><span class="p">())</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">sub</span><span class="p">.</span><span class="n">Familly_id_x</span><span class="p">.</span><span class="n">isnull</span><span class="p">())</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">sub</span><span class="p">.</span><span class="n">Familly_id_z</span><span class="p">.</span><span class="n">isnull</span><span class="p">())].</span><span class="n">index</span>
<span class="n">df_full</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span> <span class="s">'Familly_id_z'</span><span class="p">]</span> <span class="o">=</span> <span class="n">cnt_fam_id</span> 
<span class="n">cnt_fam_id</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_full</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Last_Name'</span><span class="p">]</span> <span class="o">==</span> <span class="s">'Beckwith'</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Last_Name'</span><span class="p">]</span> <span class="o">==</span> <span class="s">'Newsom'</span><span class="p">),</span> <span class="s">'Familly_id_z'</span> <span class="p">]</span> <span class="o">=</span> <span class="n">cnt_fam_id</span>
<span class="n">cnt_fam_id</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_full</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Last_Name'</span><span class="p">]</span> <span class="o">==</span> <span class="s">'Christy'</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Last_Name'</span><span class="p">]</span> <span class="o">==</span> <span class="s">'Jacobsohn'</span><span class="p">),</span> <span class="s">'Familly_id_z'</span> <span class="p">]</span> <span class="o">=</span> <span class="n">cnt_fam_id</span>
<span class="n">cnt_fam_id</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sub</span> <span class="o">=</span> <span class="n">df_full</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Last_Name'</span><span class="p">]</span> <span class="o">==</span> <span class="s">'Davidson'</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Last_Name'</span><span class="p">]</span> <span class="o">==</span> <span class="s">'Hays'</span><span class="p">)]</span>
<span class="n">sub</span> <span class="o">=</span> <span class="n">sub</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">sub</span><span class="p">[</span><span class="s">'Alone'</span><span class="p">]</span><span class="o">!=</span> <span class="mi">1</span><span class="p">]</span>
<span class="n">idx</span> <span class="o">=</span> <span class="n">sub</span><span class="p">.</span><span class="n">loc</span><span class="p">[(</span><span class="n">sub</span><span class="p">.</span><span class="n">Familly_id_y</span><span class="p">.</span><span class="n">isnull</span><span class="p">())</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">sub</span><span class="p">.</span><span class="n">Familly_id_x</span><span class="p">.</span><span class="n">isnull</span><span class="p">())</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">sub</span><span class="p">.</span><span class="n">Familly_id_z</span><span class="p">.</span><span class="n">isnull</span><span class="p">())].</span><span class="n">index</span>
<span class="n">df_full</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span> <span class="s">'Familly_id_z'</span><span class="p">]</span> <span class="o">=</span> <span class="n">cnt_fam_id</span> 
<span class="n">cnt_fam_id</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_full</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Ticket'</span><span class="p">]</span> <span class="o">==</span> <span class="s">'PC 17558'</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Alone'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Familly_id_x'</span><span class="p">].</span><span class="n">isnull</span><span class="p">()),</span> <span class="s">'Familly_id_x'</span><span class="p">]</span> <span class="o">=</span><span class="mi">124</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_full</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Last_Name'</span><span class="p">]</span> <span class="o">==</span> <span class="s">'Frauenthal'</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Alone'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Familly_id_y'</span><span class="p">].</span><span class="n">isnull</span><span class="p">()),</span> <span class="s">'Familly_id_y'</span><span class="p">]</span> <span class="o">=</span> <span class="mi">160</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_full</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Last_Name'</span><span class="p">]</span> <span class="o">==</span> <span class="s">'Frolicher-Stehli'</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Last_Name'</span><span class="p">]</span> <span class="o">==</span> <span class="s">'Frolicher'</span><span class="p">),</span> <span class="s">'Familly_id_z'</span><span class="p">]</span> <span class="o">=</span> <span class="n">cnt_fam_id</span> 
<span class="n">cnt_fam_id</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_full</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Last_Name'</span><span class="p">]</span> <span class="o">==</span> <span class="s">'Hiltunen'</span><span class="p">)</span> <span class="o">|</span>  <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Last_Name'</span><span class="p">]</span> <span class="o">==</span> <span class="s">'Hamalainen'</span><span class="p">),</span> <span class="s">'Familly_id_z'</span><span class="p">]</span> <span class="o">=</span> <span class="n">cnt_fam_id</span> 
<span class="n">cnt_fam_id</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_full</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Last_Name'</span><span class="p">]</span> <span class="o">==</span> <span class="s">'Hansen'</span><span class="p">)</span><span class="o">&amp;</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Alone'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">),</span> <span class="s">'Familly_id_z'</span><span class="p">]</span> <span class="o">=</span> <span class="n">cnt_fam_id</span> 
<span class="n">cnt_fam_id</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_full</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Last_Name'</span><span class="p">]</span> <span class="o">==</span> <span class="s">'Hirvonen'</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Last_Name'</span><span class="p">]</span> <span class="o">==</span> <span class="s">'Lindqvist'</span><span class="p">),</span> <span class="s">'Familly_id_z'</span><span class="p">]</span> <span class="o">=</span> <span class="n">cnt_fam_id</span> 
<span class="n">cnt_fam_id</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sub</span> <span class="o">=</span> <span class="n">df_full</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Last_Name'</span><span class="p">]</span> <span class="o">==</span> <span class="s">'Hocking'</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Last_Name'</span><span class="p">]</span> <span class="o">==</span> <span class="s">'Richards'</span><span class="p">)</span><span class="o">|</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Last_Name'</span><span class="p">]</span> <span class="o">==</span> <span class="s">'Wilkes'</span><span class="p">)</span> <span class="p">]</span>
<span class="n">idx</span> <span class="o">=</span> <span class="n">sub</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">sub</span><span class="p">[</span><span class="s">'Alone'</span><span class="p">]</span><span class="o">==</span><span class="mi">0</span><span class="p">].</span><span class="n">index</span>
<span class="n">idx</span> <span class="o">=</span> <span class="n">sub</span><span class="p">.</span><span class="n">loc</span><span class="p">[(</span><span class="n">sub</span><span class="p">.</span><span class="n">Familly_id_y</span><span class="p">.</span><span class="n">isnull</span><span class="p">())</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">sub</span><span class="p">.</span><span class="n">Familly_id_x</span><span class="p">.</span><span class="n">isnull</span><span class="p">())</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">sub</span><span class="p">.</span><span class="n">Familly_id_z</span><span class="p">.</span><span class="n">isnull</span><span class="p">())].</span><span class="n">index</span>
<span class="n">df_full</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span> <span class="s">'Familly_id_z'</span><span class="p">]</span> <span class="o">=</span> <span class="n">cnt_fam_id</span> 
<span class="n">cnt_fam_id</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_full</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Last_Name'</span><span class="p">]</span> <span class="o">==</span> <span class="s">'Jefferys'</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Last_Name'</span><span class="p">]</span> <span class="o">==</span> <span class="s">'Renouf'</span><span class="p">),</span> <span class="s">'Familly_id_z'</span><span class="p">]</span> <span class="o">=</span> <span class="n">cnt_fam_id</span> 
<span class="n">cnt_fam_id</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_full</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Last_Name'</span><span class="p">]</span> <span class="o">==</span> <span class="s">'Kink'</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Last_Name'</span><span class="p">]</span> <span class="o">==</span> <span class="s">'Kink-Heilmann'</span><span class="p">),</span> <span class="s">'Familly_id_z'</span><span class="p">]</span> <span class="o">=</span> <span class="n">cnt_fam_id</span> 
<span class="n">cnt_fam_id</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_full</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Last_Name'</span><span class="p">]</span> <span class="o">==</span> <span class="s">'Lahtinen'</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Last_Name'</span><span class="p">]</span> <span class="o">==</span> <span class="s">'Silven'</span><span class="p">)</span> <span class="p">,</span> <span class="s">'Familly_id_z'</span><span class="p">]</span> <span class="o">=</span> <span class="n">cnt_fam_id</span> 
<span class="n">cnt_fam_id</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_full</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Last_Name'</span><span class="p">]</span> <span class="o">==</span> <span class="s">'Minahan'</span><span class="p">),</span> <span class="s">'Familly_id_x'</span><span class="p">]</span> <span class="o">=</span> <span class="mi">32</span>

</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_full</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Last_Name'</span><span class="p">]</span> <span class="o">==</span> <span class="s">'Newell'</span><span class="p">),</span> <span class="s">'Familly_id_x'</span><span class="p">]</span> <span class="o">=</span> <span class="mi">90</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sub</span> <span class="o">=</span> <span class="n">df_full</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Last_Name'</span><span class="p">]</span> <span class="o">==</span> <span class="s">'Persson'</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Last_Name'</span><span class="p">]</span> <span class="o">==</span> <span class="s">'Strom'</span><span class="p">)</span> <span class="p">]</span>
<span class="n">idx</span> <span class="o">=</span> <span class="n">sub</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">sub</span><span class="p">[</span><span class="s">'Alone'</span><span class="p">]</span><span class="o">==</span><span class="mi">0</span><span class="p">].</span><span class="n">index</span>
<span class="n">idx</span> <span class="o">=</span> <span class="n">sub</span><span class="p">.</span><span class="n">loc</span><span class="p">[(</span><span class="n">sub</span><span class="p">.</span><span class="n">Familly_id_y</span><span class="p">.</span><span class="n">isnull</span><span class="p">())</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">sub</span><span class="p">.</span><span class="n">Familly_id_x</span><span class="p">.</span><span class="n">isnull</span><span class="p">())</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">sub</span><span class="p">.</span><span class="n">Familly_id_z</span><span class="p">.</span><span class="n">isnull</span><span class="p">())].</span><span class="n">index</span>
<span class="n">df_full</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span> <span class="s">'Familly_id_z'</span><span class="p">]</span> <span class="o">=</span> <span class="n">cnt_fam_id</span> 
<span class="n">cnt_fam_id</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_full</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Last_Name'</span><span class="p">]</span> <span class="o">==</span> <span class="s">'Thomas'</span><span class="p">)</span><span class="o">&amp;</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Alone'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">),</span> <span class="s">'Familly_id_y'</span><span class="p">]</span> <span class="o">=</span> <span class="mi">169</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_full</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Last_Name'</span><span class="p">]</span> <span class="o">==</span> <span class="s">'Vander Planke'</span><span class="p">)</span><span class="o">&amp;</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Alone'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">,</span> <span class="s">'Familly_id_z'</span><span class="p">]</span> <span class="o">=</span> <span class="n">cnt_fam_id</span> 
<span class="n">cnt_fam_id</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div></div>

<h5 id="verif">VERIF</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sub</span> <span class="o">=</span> <span class="n">df_full</span><span class="p">.</span><span class="n">loc</span><span class="p">[(</span><span class="n">df_full</span><span class="p">.</span><span class="n">Alone</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)]</span>
<span class="n">pd</span><span class="p">.</span><span class="n">set_option</span><span class="p">(</span><span class="s">'display.max_columns'</span><span class="p">,</span> <span class="mi">500</span><span class="p">)</span>
<span class="n">pd</span><span class="p">.</span><span class="n">set_option</span><span class="p">(</span><span class="s">'display.max_rows'</span><span class="p">,</span> <span class="mi">500</span><span class="p">)</span>
<span class="n">sub</span><span class="p">.</span><span class="n">loc</span><span class="p">[(</span><span class="n">sub</span><span class="p">.</span><span class="n">Familly_id_y</span><span class="p">.</span><span class="n">isnull</span><span class="p">())</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">sub</span><span class="p">.</span><span class="n">Familly_id_x</span><span class="p">.</span><span class="n">isnull</span><span class="p">())</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">sub</span><span class="p">.</span><span class="n">Familly_id_z</span><span class="p">.</span><span class="n">isnull</span><span class="p">())]</span>
</code></pre></div></div>

<div id="df-6f0a60d7-e9f4-4312-a7e5-ba1f934127fd">
    <div class="colab-df-container">
      <div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>PassengerId</th>
      <th>Survived</th>
      <th>Pclass</th>
      <th>Name</th>
      <th>Sex</th>
      <th>Age</th>
      <th>SibSp</th>
      <th>Parch</th>
      <th>Ticket</th>
      <th>Fare</th>
      <th>Embarked</th>
      <th>Title</th>
      <th>FamilySize</th>
      <th>Alone</th>
      <th>Last_Name</th>
      <th>Familly_id_x</th>
      <th>Familly_id_y</th>
      <th>Familly_id_z</th>
    </tr>
  </thead>
  <tbody>
  </tbody>
</table>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-6f0a60d7-e9f4-4312-a7e5-ba1f934127fd')" title="Convert this dataframe to an interactive table." style="display:none;">

  &lt;svg xmlns="http://www.w3.org/2000/svg" height="24px"viewBox="0 0 24 24"
       width="24px"&gt;
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z" /><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z" />
  &lt;/svg&gt;
      </button>

  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-6f0a60d7-e9f4-4312-a7e5-ba1f934127fd button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-6f0a60d7-e9f4-4312-a7e5-ba1f934127fd');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">len</span><span class="p">(</span><span class="n">sub</span><span class="p">.</span><span class="n">loc</span><span class="p">[(</span><span class="n">sub</span><span class="p">.</span><span class="n">Familly_id_y</span><span class="p">.</span><span class="n">isnull</span><span class="p">())</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">sub</span><span class="p">.</span><span class="n">Familly_id_x</span><span class="p">.</span><span class="n">isnull</span><span class="p">())</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">sub</span><span class="p">.</span><span class="n">Familly_id_z</span><span class="p">.</span><span class="n">isnull</span><span class="p">())])</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_full</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Last_Name'</span><span class="p">]</span> <span class="o">==</span> <span class="s">'Natsch'</span><span class="p">)</span><span class="o">&amp;</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Alone'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)]</span>
</code></pre></div></div>

<div id="df-04c9019a-5000-463e-aec4-16a75b1b186b">
    <div class="colab-df-container">
      <div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>PassengerId</th>
      <th>Survived</th>
      <th>Pclass</th>
      <th>Name</th>
      <th>Sex</th>
      <th>Age</th>
      <th>SibSp</th>
      <th>Parch</th>
      <th>Ticket</th>
      <th>Fare</th>
      <th>Embarked</th>
      <th>Title</th>
      <th>FamilySize</th>
      <th>Alone</th>
      <th>Last_Name</th>
      <th>Familly_id_x</th>
      <th>Familly_id_y</th>
      <th>Familly_id_z</th>
    </tr>
  </thead>
  <tbody>
  </tbody>
</table>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-04c9019a-5000-463e-aec4-16a75b1b186b')" title="Convert this dataframe to an interactive table." style="display:none;">

  &lt;svg xmlns="http://www.w3.org/2000/svg" height="24px"viewBox="0 0 24 24"
       width="24px"&gt;
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z" /><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z" />
  &lt;/svg&gt;
      </button>

  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-04c9019a-5000-463e-aec4-16a75b1b186b button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-04c9019a-5000-463e-aec4-16a75b1b186b');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>

<h5 id="out">OUT</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_full</span><span class="p">[</span><span class="s">'Familly_id'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_full</span><span class="p">[[</span><span class="s">'Familly_id_x'</span><span class="p">,</span><span class="s">'Familly_id_y'</span><span class="p">,</span><span class="s">'Familly_id_z'</span><span class="p">]].</span><span class="n">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nb">apply</span><span class="p">(</span><span class="nb">sum</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_full</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div id="df-10f9d41f-c58a-4b7d-9f9f-f9c4a3821631">
    <div class="colab-df-container">
      <div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>PassengerId</th>
      <th>Survived</th>
      <th>Pclass</th>
      <th>Name</th>
      <th>Sex</th>
      <th>Age</th>
      <th>SibSp</th>
      <th>Parch</th>
      <th>Ticket</th>
      <th>Fare</th>
      <th>Embarked</th>
      <th>Title</th>
      <th>FamilySize</th>
      <th>Alone</th>
      <th>Last_Name</th>
      <th>Familly_id_x</th>
      <th>Familly_id_y</th>
      <th>Familly_id_z</th>
      <th>Familly_id</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>846</td>
      <td>0</td>
      <td>3</td>
      <td>Abbing, Mr. Anthony</td>
      <td>male</td>
      <td>42.00</td>
      <td>0</td>
      <td>0</td>
      <td>C.A. 5547</td>
      <td>7.55</td>
      <td>S</td>
      <td>Mr</td>
      <td>1</td>
      <td>1</td>
      <td>Abbing</td>
      <td>nan</td>
      <td>nan</td>
      <td>nan</td>
      <td>0.00</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1284</td>
      <td>9</td>
      <td>3</td>
      <td>Abbott, Master. Eugene Joseph</td>
      <td>male</td>
      <td>13.00</td>
      <td>0</td>
      <td>2</td>
      <td>C.A. 2673</td>
      <td>20.25</td>
      <td>S</td>
      <td>Master</td>
      <td>3</td>
      <td>0</td>
      <td>Abbott</td>
      <td>114.00</td>
      <td>nan</td>
      <td>nan</td>
      <td>114.00</td>
    </tr>
    <tr>
      <th>2</th>
      <td>747</td>
      <td>0</td>
      <td>3</td>
      <td>Abbott, Mr. Rossmore Edward</td>
      <td>male</td>
      <td>16.00</td>
      <td>1</td>
      <td>1</td>
      <td>C.A. 2673</td>
      <td>20.25</td>
      <td>S</td>
      <td>Mr</td>
      <td>3</td>
      <td>0</td>
      <td>Abbott</td>
      <td>114.00</td>
      <td>nan</td>
      <td>nan</td>
      <td>114.00</td>
    </tr>
    <tr>
      <th>3</th>
      <td>280</td>
      <td>1</td>
      <td>3</td>
      <td>Abbott, Mrs. Stanton (Rosa Hunt)</td>
      <td>female</td>
      <td>35.00</td>
      <td>1</td>
      <td>1</td>
      <td>C.A. 2673</td>
      <td>20.25</td>
      <td>S</td>
      <td>Mrs</td>
      <td>3</td>
      <td>0</td>
      <td>Abbott</td>
      <td>114.00</td>
      <td>nan</td>
      <td>nan</td>
      <td>114.00</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1237</td>
      <td>9</td>
      <td>3</td>
      <td>Abelseth, Miss. Karen Marie</td>
      <td>female</td>
      <td>16.00</td>
      <td>0</td>
      <td>0</td>
      <td>348125</td>
      <td>7.65</td>
      <td>S</td>
      <td>Miss</td>
      <td>1</td>
      <td>1</td>
      <td>Abelseth</td>
      <td>nan</td>
      <td>nan</td>
      <td>nan</td>
      <td>0.00</td>
    </tr>
  </tbody>
</table>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-10f9d41f-c58a-4b7d-9f9f-f9c4a3821631')" title="Convert this dataframe to an interactive table." style="display:none;">

  &lt;svg xmlns="http://www.w3.org/2000/svg" height="24px"viewBox="0 0 24 24"
       width="24px"&gt;
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z" /><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z" />
  &lt;/svg&gt;
      </button>

  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-10f9d41f-c58a-4b7d-9f9f-f9c4a3821631 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-10f9d41f-c58a-4b7d-9f9f-f9c4a3821631');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pd</span><span class="p">.</span><span class="n">crosstab</span><span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Familly_id'</span><span class="p">],</span> <span class="n">df_full</span><span class="p">[</span><span class="s">'Survived'</span><span class="p">]).</span><span class="n">drop</span><span class="p">([</span><span class="mi">0</span><span class="p">]).</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s">'bar'</span><span class="p">,</span> <span class="n">stacked</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="p">[</span><span class="s">'r'</span><span class="p">,</span><span class="s">'g'</span><span class="p">,</span><span class="s">'grey'</span><span class="p">],</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">30</span><span class="p">,</span><span class="mi">10</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="output_130_0.png" alt="png" /></p>

<p>We can see that famillies are a group they all die or all survived exception for couple</p>

<h4 id="couple">Couple</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_full</span><span class="p">.</span><span class="n">head</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div></div>

<div id="df-79eb1769-a51d-4bfc-8ceb-3ce811e1532f">
    <div class="colab-df-container">
      <div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>PassengerId</th>
      <th>Survived</th>
      <th>Pclass</th>
      <th>Name</th>
      <th>Sex</th>
      <th>Age</th>
      <th>SibSp</th>
      <th>Parch</th>
      <th>Ticket</th>
      <th>Fare</th>
      <th>Embarked</th>
      <th>Title</th>
      <th>FamilySize</th>
      <th>Alone</th>
      <th>Last_Name</th>
      <th>Familly_id_x</th>
      <th>Familly_id_y</th>
      <th>Familly_id_z</th>
      <th>Familly_id</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>846</td>
      <td>0</td>
      <td>3</td>
      <td>Abbing, Mr. Anthony</td>
      <td>male</td>
      <td>42.00</td>
      <td>0</td>
      <td>0</td>
      <td>C.A. 5547</td>
      <td>7.55</td>
      <td>S</td>
      <td>Mr</td>
      <td>1</td>
      <td>1</td>
      <td>Abbing</td>
      <td>nan</td>
      <td>nan</td>
      <td>nan</td>
      <td>0.00</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1284</td>
      <td>9</td>
      <td>3</td>
      <td>Abbott, Master. Eugene Joseph</td>
      <td>male</td>
      <td>13.00</td>
      <td>0</td>
      <td>2</td>
      <td>C.A. 2673</td>
      <td>20.25</td>
      <td>S</td>
      <td>Master</td>
      <td>3</td>
      <td>0</td>
      <td>Abbott</td>
      <td>114.00</td>
      <td>nan</td>
      <td>nan</td>
      <td>114.00</td>
    </tr>
  </tbody>
</table>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-79eb1769-a51d-4bfc-8ceb-3ce811e1532f')" title="Convert this dataframe to an interactive table." style="display:none;">

  &lt;svg xmlns="http://www.w3.org/2000/svg" height="24px"viewBox="0 0 24 24"
       width="24px"&gt;
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z" /><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z" />
  &lt;/svg&gt;
      </button>

  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-79eb1769-a51d-4bfc-8ceb-3ce811e1532f button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-79eb1769-a51d-4bfc-8ceb-3ce811e1532f');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_full</span><span class="p">[</span><span class="s">'group_size'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_full</span><span class="p">.</span><span class="n">groupby</span><span class="p">([</span><span class="s">'Familly_id'</span><span class="p">]).</span><span class="n">PassengerId</span><span class="p">.</span><span class="n">transform</span><span class="p">(</span><span class="s">'count'</span><span class="p">)</span>
<span class="n">df_full</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">df_full</span><span class="p">[</span><span class="s">'group_size'</span><span class="p">]</span><span class="o">==</span><span class="mi">790</span><span class="p">,</span> <span class="s">'group_size'</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">d_sex</span> <span class="o">=</span> <span class="p">{</span><span class="s">'male'</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="s">'female'</span> <span class="p">:</span> <span class="mi">0</span><span class="p">}</span>
<span class="n">df_full</span><span class="p">[</span><span class="s">'Sex'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_full</span><span class="p">[</span><span class="s">'Sex'</span><span class="p">].</span><span class="nb">map</span><span class="p">(</span><span class="n">d_sex</span><span class="p">)</span>
<span class="c1"># df_full.loc[df_full['group_size']==2].groupby(['Familly_id']).Sex.sum()
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_full</span><span class="p">[</span><span class="s">'grp_cnt_male'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_full</span><span class="p">.</span><span class="n">groupby</span><span class="p">([</span><span class="s">'Familly_id'</span><span class="p">]).</span><span class="n">Sex</span><span class="p">.</span><span class="n">transform</span><span class="p">(</span><span class="s">'sum'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_full</span><span class="p">.</span><span class="n">head</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div></div>

<div id="df-aff7bbbd-ea1c-46a5-bd53-c3a47ec39474">
    <div class="colab-df-container">
      <div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>PassengerId</th>
      <th>Survived</th>
      <th>Pclass</th>
      <th>Name</th>
      <th>Sex</th>
      <th>Age</th>
      <th>SibSp</th>
      <th>Parch</th>
      <th>Ticket</th>
      <th>Fare</th>
      <th>Embarked</th>
      <th>Title</th>
      <th>FamilySize</th>
      <th>Alone</th>
      <th>Last_Name</th>
      <th>Familly_id_x</th>
      <th>Familly_id_y</th>
      <th>Familly_id_z</th>
      <th>Familly_id</th>
      <th>group_size</th>
      <th>grp_cnt_male</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>846</td>
      <td>0</td>
      <td>3</td>
      <td>Abbing, Mr. Anthony</td>
      <td>1</td>
      <td>42.00</td>
      <td>0</td>
      <td>0</td>
      <td>C.A. 5547</td>
      <td>7.55</td>
      <td>S</td>
      <td>Mr</td>
      <td>1</td>
      <td>1</td>
      <td>Abbing</td>
      <td>nan</td>
      <td>nan</td>
      <td>nan</td>
      <td>0.00</td>
      <td>0</td>
      <td>596</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1284</td>
      <td>9</td>
      <td>3</td>
      <td>Abbott, Master. Eugene Joseph</td>
      <td>1</td>
      <td>13.00</td>
      <td>0</td>
      <td>2</td>
      <td>C.A. 2673</td>
      <td>20.25</td>
      <td>S</td>
      <td>Master</td>
      <td>3</td>
      <td>0</td>
      <td>Abbott</td>
      <td>114.00</td>
      <td>nan</td>
      <td>nan</td>
      <td>114.00</td>
      <td>3</td>
      <td>2</td>
    </tr>
  </tbody>
</table>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-aff7bbbd-ea1c-46a5-bd53-c3a47ec39474')" title="Convert this dataframe to an interactive table." style="display:none;">

  &lt;svg xmlns="http://www.w3.org/2000/svg" height="24px"viewBox="0 0 24 24"
       width="24px"&gt;
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z" /><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z" />
  &lt;/svg&gt;
      </button>

  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-aff7bbbd-ea1c-46a5-bd53-c3a47ec39474 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-aff7bbbd-ea1c-46a5-bd53-c3a47ec39474');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_full</span><span class="p">[</span><span class="s">'Couple'</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_full</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'group_size'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'grp_cnt_male'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'SibSp'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">),</span> <span class="s">'Couple'</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">couple</span> <span class="o">=</span> <span class="n">df_full</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Couple'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pd</span><span class="p">.</span><span class="n">crosstab</span><span class="p">(</span><span class="n">couple</span><span class="p">[</span><span class="s">'Familly_id'</span><span class="p">],</span> <span class="n">couple</span><span class="p">[</span><span class="s">'Survived'</span><span class="p">]).</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s">'bar'</span><span class="p">,</span> <span class="n">stacked</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="p">[</span><span class="s">'r'</span><span class="p">,</span><span class="s">'g'</span><span class="p">,</span><span class="s">'grey'</span><span class="p">],</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">30</span><span class="p">,</span><span class="mi">10</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="output_141_0.png" alt="png" /></p>

<h3 id="data-correlation">Data correlation</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># d_sex = {'male':1, 'female' : 0}
# for df in dfs:
#   df[1]['Sex'] = df[1]['Sex'].map(d_sex)
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># mask = np.triu(np.ones_like(df_train.corr(), dtype=bool))
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># plt.figure(figsize=(12,6))
# sns.heatmap(df_train.corr(),mask=mask ,annot = True, fmt = '.2f')
# plt.show()
</span></code></pre></div></div>

<h2 id="fill-nan">Fill NAn</h2>

<h4 id="fare">Fare</h4>

<p>We saw there is only one passenger with missing Fare value in test set.</p>

<p>According to correlation graph, Fare is corralated to family size (Parch and SibSp), Sex and Pclass features.</p>

<p>Median Fare value of a male with a third class ticket and no family is a logical choice to fill the missing value.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_full</span><span class="p">.</span><span class="n">groupby</span><span class="p">([</span><span class="s">'Pclass'</span><span class="p">,</span><span class="s">'Sex'</span> <span class="p">,</span><span class="s">'Parch'</span><span class="p">,</span> <span class="s">'SibSp'</span><span class="p">]).</span><span class="n">Fare</span><span class="p">.</span><span class="n">median</span><span class="p">()[</span><span class="mi">3</span><span class="p">][</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>7.8875
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">med_fare</span> <span class="o">=</span> <span class="n">df_full</span><span class="p">.</span><span class="n">groupby</span><span class="p">([</span><span class="s">'Pclass'</span><span class="p">,</span><span class="s">'Sex'</span> <span class="p">,</span><span class="s">'Parch'</span><span class="p">,</span> <span class="s">'SibSp'</span><span class="p">]).</span><span class="n">Fare</span><span class="p">.</span><span class="n">median</span><span class="p">()[</span><span class="mi">3</span><span class="p">][</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
<span class="c1"># Filling the missing value in Fare with the median Fare of 3rd class alone passenger
</span><span class="n">df_full</span><span class="p">.</span><span class="n">loc</span><span class="p">[(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Fare'</span><span class="p">].</span><span class="n">isnull</span><span class="p">())</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Survived'</span><span class="p">]</span><span class="o">==</span><span class="mi">9</span><span class="p">),</span><span class="s">'Fare'</span><span class="p">]</span> <span class="o">=</span> <span class="n">med_fare</span>
</code></pre></div></div>

<h4 id="age">Age</h4>

<p>We will use a model to predict missing Age</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_full</span> <span class="o">=</span> <span class="n">df_full</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="s">'PassengerId'</span><span class="p">).</span><span class="n">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">df_full</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div id="df-6b0f7b9d-c411-4355-a53e-4d1a67a32646">
    <div class="colab-df-container">
      <div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>PassengerId</th>
      <th>Survived</th>
      <th>Pclass</th>
      <th>Name</th>
      <th>Sex</th>
      <th>Age</th>
      <th>SibSp</th>
      <th>Parch</th>
      <th>Ticket</th>
      <th>Fare</th>
      <th>Embarked</th>
      <th>Title</th>
      <th>FamilySize</th>
      <th>Alone</th>
      <th>Last_Name</th>
      <th>Familly_id_x</th>
      <th>Familly_id_y</th>
      <th>Familly_id_z</th>
      <th>Familly_id</th>
      <th>group_size</th>
      <th>grp_cnt_male</th>
      <th>Couple</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>0</td>
      <td>3</td>
      <td>Braund, Mr. Owen Harris</td>
      <td>1</td>
      <td>22.00</td>
      <td>1</td>
      <td>0</td>
      <td>A/5 21171</td>
      <td>7.25</td>
      <td>S</td>
      <td>Mr</td>
      <td>2</td>
      <td>0</td>
      <td>Braund</td>
      <td>nan</td>
      <td>154.00</td>
      <td>nan</td>
      <td>154.00</td>
      <td>2</td>
      <td>2</td>
      <td>0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>1</td>
      <td>1</td>
      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>
      <td>0</td>
      <td>38.00</td>
      <td>1</td>
      <td>0</td>
      <td>PC 17599</td>
      <td>71.28</td>
      <td>C</td>
      <td>Mrs</td>
      <td>2</td>
      <td>0</td>
      <td>Cumings</td>
      <td>130.00</td>
      <td>nan</td>
      <td>nan</td>
      <td>130.00</td>
      <td>2</td>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>1</td>
      <td>3</td>
      <td>Heikkinen, Miss. Laina</td>
      <td>0</td>
      <td>26.00</td>
      <td>0</td>
      <td>0</td>
      <td>STON/O2. 3101282</td>
      <td>7.92</td>
      <td>S</td>
      <td>Miss</td>
      <td>1</td>
      <td>1</td>
      <td>Heikkinen</td>
      <td>nan</td>
      <td>nan</td>
      <td>nan</td>
      <td>0.00</td>
      <td>0</td>
      <td>596</td>
      <td>0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>1</td>
      <td>1</td>
      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>
      <td>0</td>
      <td>35.00</td>
      <td>1</td>
      <td>0</td>
      <td>113803</td>
      <td>53.10</td>
      <td>S</td>
      <td>Mrs</td>
      <td>2</td>
      <td>0</td>
      <td>Futrelle</td>
      <td>13.00</td>
      <td>nan</td>
      <td>nan</td>
      <td>13.00</td>
      <td>2</td>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>0</td>
      <td>3</td>
      <td>Allen, Mr. William Henry</td>
      <td>1</td>
      <td>35.00</td>
      <td>0</td>
      <td>0</td>
      <td>373450</td>
      <td>8.05</td>
      <td>S</td>
      <td>Mr</td>
      <td>1</td>
      <td>1</td>
      <td>Allen</td>
      <td>nan</td>
      <td>nan</td>
      <td>nan</td>
      <td>0.00</td>
      <td>0</td>
      <td>596</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-6b0f7b9d-c411-4355-a53e-4d1a67a32646')" title="Convert this dataframe to an interactive table." style="display:none;">

  &lt;svg xmlns="http://www.w3.org/2000/svg" height="24px"viewBox="0 0 24 24"
       width="24px"&gt;
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z" /><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z" />
  &lt;/svg&gt;
      </button>

  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-6b0f7b9d-c411-4355-a53e-4d1a67a32646 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-6b0f7b9d-c411-4355-a53e-4d1a67a32646');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_train_test</span> <span class="o">=</span> <span class="n">df_full</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span>
<span class="n">df_train_test</span><span class="p">.</span><span class="n">drop</span><span class="p">([</span><span class="s">'Name'</span><span class="p">,</span> <span class="s">'Last_Name'</span><span class="p">,</span> <span class="s">'Ticket'</span><span class="p">,</span> <span class="s">'Familly_id_x'</span><span class="p">,</span> <span class="s">'Familly_id_y'</span><span class="p">,</span> <span class="s">'Familly_id_z'</span><span class="p">,</span> <span class="s">'FamilySize'</span> <span class="p">,</span><span class="s">'grp_cnt_male'</span><span class="p">],</span> <span class="n">axis</span> <span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">inplace</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>
<span class="n">df_train_test</span>
</code></pre></div></div>

<div id="df-7133d3e2-ac28-49cc-a2df-b2fe10a40a09">
    <div class="colab-df-container">
      <div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>PassengerId</th>
      <th>Survived</th>
      <th>Pclass</th>
      <th>Sex</th>
      <th>Age</th>
      <th>SibSp</th>
      <th>Parch</th>
      <th>Fare</th>
      <th>Embarked</th>
      <th>Title</th>
      <th>Alone</th>
      <th>Familly_id</th>
      <th>group_size</th>
      <th>Couple</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>0</td>
      <td>3</td>
      <td>1</td>
      <td>22.00</td>
      <td>1</td>
      <td>0</td>
      <td>7.25</td>
      <td>S</td>
      <td>Mr</td>
      <td>0</td>
      <td>154.00</td>
      <td>2</td>
      <td>0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>1</td>
      <td>1</td>
      <td>0</td>
      <td>38.00</td>
      <td>1</td>
      <td>0</td>
      <td>71.28</td>
      <td>C</td>
      <td>Mrs</td>
      <td>0</td>
      <td>130.00</td>
      <td>2</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>1</td>
      <td>3</td>
      <td>0</td>
      <td>26.00</td>
      <td>0</td>
      <td>0</td>
      <td>7.92</td>
      <td>S</td>
      <td>Miss</td>
      <td>1</td>
      <td>0.00</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>1</td>
      <td>1</td>
      <td>0</td>
      <td>35.00</td>
      <td>1</td>
      <td>0</td>
      <td>53.10</td>
      <td>S</td>
      <td>Mrs</td>
      <td>0</td>
      <td>13.00</td>
      <td>2</td>
      <td>1</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>0</td>
      <td>3</td>
      <td>1</td>
      <td>35.00</td>
      <td>0</td>
      <td>0</td>
      <td>8.05</td>
      <td>S</td>
      <td>Mr</td>
      <td>1</td>
      <td>0.00</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>1304</th>
      <td>1305</td>
      <td>9</td>
      <td>3</td>
      <td>1</td>
      <td>nan</td>
      <td>0</td>
      <td>0</td>
      <td>8.05</td>
      <td>S</td>
      <td>Mr</td>
      <td>1</td>
      <td>0.00</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>1305</th>
      <td>1306</td>
      <td>9</td>
      <td>1</td>
      <td>0</td>
      <td>39.00</td>
      <td>0</td>
      <td>0</td>
      <td>108.90</td>
      <td>C</td>
      <td>High</td>
      <td>1</td>
      <td>0.00</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>1306</th>
      <td>1307</td>
      <td>9</td>
      <td>3</td>
      <td>1</td>
      <td>38.50</td>
      <td>0</td>
      <td>0</td>
      <td>7.25</td>
      <td>S</td>
      <td>Mr</td>
      <td>1</td>
      <td>0.00</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>1307</th>
      <td>1308</td>
      <td>9</td>
      <td>3</td>
      <td>1</td>
      <td>nan</td>
      <td>0</td>
      <td>0</td>
      <td>8.05</td>
      <td>S</td>
      <td>Mr</td>
      <td>1</td>
      <td>0.00</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>1308</th>
      <td>1309</td>
      <td>9</td>
      <td>3</td>
      <td>1</td>
      <td>nan</td>
      <td>1</td>
      <td>1</td>
      <td>22.36</td>
      <td>C</td>
      <td>Master</td>
      <td>0</td>
      <td>64.00</td>
      <td>3</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
<p>1309 rows Ã 14 columns</p>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-7133d3e2-ac28-49cc-a2df-b2fe10a40a09')" title="Convert this dataframe to an interactive table." style="display:none;">

  &lt;svg xmlns="http://www.w3.org/2000/svg" height="24px"viewBox="0 0 24 24"
       width="24px"&gt;
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z" /><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z" />
  &lt;/svg&gt;
      </button>

  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-7133d3e2-ac28-49cc-a2df-b2fe10a40a09 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-7133d3e2-ac28-49cc-a2df-b2fe10a40a09');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>

<h3 id="encoding">Encoding</h3>

<p>Feature to encode:</p>
<ul>
  <li>Sex (binary)</li>
  <li>Embarked (OHE)</li>
  <li>Title (OHE)</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Sex
# d_sex = {'male':1, 'female' : 0}
# df_train_test['Sex'] = df_train_test['Sex'].map(d_sex)
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Embarked, Title
</span><span class="n">df_train_test</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">get_dummies</span><span class="p">(</span><span class="n">df_train_test</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'Embarked'</span><span class="p">,</span> <span class="s">'Title'</span><span class="p">])</span>
<span class="n">df_train_test</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div id="df-8d78a236-4066-4b33-b489-c8d9e992fea5">
    <div class="colab-df-container">
      <div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>PassengerId</th>
      <th>Survived</th>
      <th>Pclass</th>
      <th>Sex</th>
      <th>Age</th>
      <th>SibSp</th>
      <th>Parch</th>
      <th>Fare</th>
      <th>Alone</th>
      <th>Familly_id</th>
      <th>group_size</th>
      <th>Couple</th>
      <th>Embarked_C</th>
      <th>Embarked_Q</th>
      <th>Embarked_S</th>
      <th>Title_High</th>
      <th>Title_Master</th>
      <th>Title_Miss</th>
      <th>Title_Mr</th>
      <th>Title_Mrs</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>0</td>
      <td>3</td>
      <td>1</td>
      <td>22.00</td>
      <td>1</td>
      <td>0</td>
      <td>7.25</td>
      <td>0</td>
      <td>154.00</td>
      <td>2</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>1</td>
      <td>1</td>
      <td>0</td>
      <td>38.00</td>
      <td>1</td>
      <td>0</td>
      <td>71.28</td>
      <td>0</td>
      <td>130.00</td>
      <td>2</td>
      <td>1</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>1</td>
      <td>3</td>
      <td>0</td>
      <td>26.00</td>
      <td>0</td>
      <td>0</td>
      <td>7.92</td>
      <td>1</td>
      <td>0.00</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>1</td>
      <td>1</td>
      <td>0</td>
      <td>35.00</td>
      <td>1</td>
      <td>0</td>
      <td>53.10</td>
      <td>0</td>
      <td>13.00</td>
      <td>2</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>0</td>
      <td>3</td>
      <td>1</td>
      <td>35.00</td>
      <td>0</td>
      <td>0</td>
      <td>8.05</td>
      <td>1</td>
      <td>0.00</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-8d78a236-4066-4b33-b489-c8d9e992fea5')" title="Convert this dataframe to an interactive table." style="display:none;">

  &lt;svg xmlns="http://www.w3.org/2000/svg" height="24px"viewBox="0 0 24 24"
       width="24px"&gt;
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z" /><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z" />
  &lt;/svg&gt;
      </button>

  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-8d78a236-4066-4b33-b489-c8d9e992fea5 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-8d78a236-4066-4b33-b489-c8d9e992fea5');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">col_to_add_after_training</span> <span class="o">=</span> <span class="p">[</span><span class="s">'Survived'</span><span class="p">,</span> <span class="s">'Familly_id'</span><span class="p">,</span><span class="s">'PassengerId'</span><span class="p">,</span> <span class="s">'Embarked_C'</span><span class="p">,</span> <span class="s">'Embarked_Q'</span><span class="p">,</span> <span class="s">'Embarked_S'</span><span class="p">]</span>
<span class="n">add_columns_train_test</span> <span class="o">=</span> <span class="n">df_train_test</span><span class="p">[</span><span class="n">col_to_add_after_training</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># we drop survived bc of Nan and Familly_id
</span><span class="n">df_train_test</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="n">col_to_add_after_training</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">df_train_test</span>
</code></pre></div></div>

<div id="df-89261cb1-5d56-4d22-9859-54eb3f4f7255">
    <div class="colab-df-container">
      <div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Pclass</th>
      <th>Sex</th>
      <th>Age</th>
      <th>SibSp</th>
      <th>Parch</th>
      <th>Fare</th>
      <th>Alone</th>
      <th>group_size</th>
      <th>Couple</th>
      <th>Title_High</th>
      <th>Title_Master</th>
      <th>Title_Miss</th>
      <th>Title_Mr</th>
      <th>Title_Mrs</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>3</td>
      <td>1</td>
      <td>22.00</td>
      <td>1</td>
      <td>0</td>
      <td>7.25</td>
      <td>0</td>
      <td>2</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>0</td>
      <td>38.00</td>
      <td>1</td>
      <td>0</td>
      <td>71.28</td>
      <td>0</td>
      <td>2</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>0</td>
      <td>26.00</td>
      <td>0</td>
      <td>0</td>
      <td>7.92</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1</td>
      <td>0</td>
      <td>35.00</td>
      <td>1</td>
      <td>0</td>
      <td>53.10</td>
      <td>0</td>
      <td>2</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>4</th>
      <td>3</td>
      <td>1</td>
      <td>35.00</td>
      <td>0</td>
      <td>0</td>
      <td>8.05</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>1304</th>
      <td>3</td>
      <td>1</td>
      <td>nan</td>
      <td>0</td>
      <td>0</td>
      <td>8.05</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>1305</th>
      <td>1</td>
      <td>0</td>
      <td>39.00</td>
      <td>0</td>
      <td>0</td>
      <td>108.90</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>1306</th>
      <td>3</td>
      <td>1</td>
      <td>38.50</td>
      <td>0</td>
      <td>0</td>
      <td>7.25</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>1307</th>
      <td>3</td>
      <td>1</td>
      <td>nan</td>
      <td>0</td>
      <td>0</td>
      <td>8.05</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>1308</th>
      <td>3</td>
      <td>1</td>
      <td>nan</td>
      <td>1</td>
      <td>1</td>
      <td>22.36</td>
      <td>0</td>
      <td>3</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
<p>1309 rows Ã 14 columns</p>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-89261cb1-5d56-4d22-9859-54eb3f4f7255')" title="Convert this dataframe to an interactive table." style="display:none;">

  &lt;svg xmlns="http://www.w3.org/2000/svg" height="24px"viewBox="0 0 24 24"
       width="24px"&gt;
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z" /><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z" />
  &lt;/svg&gt;
      </button>

  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-89261cb1-5d56-4d22-9859-54eb3f4f7255 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-89261cb1-5d56-4d22-9859-54eb3f4f7255');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_age_null</span> <span class="o">=</span> <span class="n">df_train_test</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">df_train_test</span><span class="p">.</span><span class="n">Age</span><span class="p">.</span><span class="n">isnull</span><span class="p">()]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_age_notnull</span> <span class="o">=</span> <span class="n">df_train_test</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">df_train_test</span><span class="p">.</span><span class="n">Age</span><span class="p">.</span><span class="n">notnull</span><span class="p">()]</span>

<span class="n">X</span> <span class="o">=</span> <span class="n">df_age_notnull</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="s">'Age'</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">df_age_notnull</span><span class="p">[</span><span class="s">'Age'</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">X_age_train</span><span class="p">,</span> <span class="n">X_age_test</span><span class="p">,</span> <span class="n">y_age_train</span><span class="p">,</span> <span class="n">y_age_test</span> <span class="o">=</span> <span class="n">train_test_split</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">reg</span> <span class="o">=</span> <span class="n">LazyRegressor</span><span class="p">(</span><span class="n">ignore_warnings</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">custom_metric</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
<span class="n">models</span><span class="p">,</span> <span class="n">predictions</span> <span class="o">=</span> <span class="n">reg</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_age_train</span><span class="p">,</span> <span class="n">X_age_test</span><span class="p">,</span> <span class="n">y_age_train</span><span class="p">,</span> <span class="n">y_age_test</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">models</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>100%|ââââââââââ| 42/42 [00:04&lt;00:00,  9.03it/s]

                               Adjusted R-Squared  R-Squared    RMSE  \
Model                                                                  
GradientBoostingRegressor                    0.42       0.45    9.76   
MLPRegressor                                 0.40       0.43    9.88   
SVR                                          0.39       0.42   10.02   
HistGradientBoostingRegressor                0.38       0.41   10.06   
LGBMRegressor                                0.37       0.40   10.14   
LinearSVR                                    0.36       0.39   10.25   
NuSVR                                        0.36       0.39   10.27   
Lasso                                        0.35       0.38   10.32   
LarsCV                                       0.35       0.38   10.35   
LassoLarsIC                                  0.34       0.38   10.38   
PoissonRegressor                             0.34       0.37   10.40   
HuberRegressor                               0.34       0.37   10.42   
SGDRegressor                                 0.34       0.37   10.44   
BayesianRidge                                0.33       0.37   10.44   
ElasticNet                                   0.33       0.37   10.44   
ElasticNetCV                                 0.33       0.36   10.47   
GammaRegressor                               0.33       0.36   10.49   
LassoCV                                      0.33       0.36   10.51   
LassoLarsCV                                  0.33       0.36   10.51   
Ridge                                        0.32       0.36   10.52   
XGBRegressor                                 0.32       0.36   10.52   
OrthogonalMatchingPursuitCV                  0.32       0.36   10.53   
RidgeCV                                      0.32       0.36   10.54   
Lars                                         0.32       0.35   10.56   
GeneralizedLinearRegressor                   0.31       0.35   10.61   
TweedieRegressor                             0.31       0.35   10.61   
RandomForestRegressor                        0.31       0.35   10.62   
LinearRegression                             0.31       0.35   10.62   
TransformedTargetRegressor                   0.31       0.35   10.62   
BaggingRegressor                             0.29       0.33   10.76   
KNeighborsRegressor                          0.29       0.33   10.77   
AdaBoostRegressor                            0.28       0.32   10.85   
ExtraTreesRegressor                          0.25       0.29   11.06   
RANSACRegressor                              0.21       0.25   11.40   
ExtraTreeRegressor                           0.20       0.24   11.43   
DecisionTreeRegressor                        0.11       0.15   12.10   
OrthogonalMatchingPursuit                    0.11       0.15   12.10   
PassiveAggressiveRegressor                   0.00       0.05   12.78   
DummyRegressor                              -0.08      -0.02   13.29   
LassoLars                                   -0.08      -0.02   13.29   
KernelRidge                                 -4.66      -4.38   30.45   
GaussianProcessRegressor               -503507.42 -478428.45 9084.67   

                               Time Taken  
Model                                      
GradientBoostingRegressor            0.14  
MLPRegressor                         1.06  
SVR                                  0.11  
HistGradientBoostingRegressor        0.54  
LGBMRegressor                        0.07  
LinearSVR                            0.02  
NuSVR                                0.09  
Lasso                                0.05  
LarsCV                               0.07  
LassoLarsIC                          0.03  
PoissonRegressor                     0.05  
HuberRegressor                       0.05  
SGDRegressor                         0.06  
BayesianRidge                        0.03  
ElasticNet                           0.02  
ElasticNetCV                         0.16  
GammaRegressor                       0.02  
LassoCV                              0.22  
LassoLarsCV                          0.09  
Ridge                                0.02  
XGBRegressor                         0.18  
OrthogonalMatchingPursuitCV          0.03  
RidgeCV                              0.04  
Lars                                 0.03  
GeneralizedLinearRegressor           0.04  
TweedieRegressor                     0.04  
RandomForestRegressor                0.37  
LinearRegression                     0.03  
TransformedTargetRegressor           0.02  
BaggingRegressor                     0.05  
KNeighborsRegressor                  0.03  
AdaBoostRegressor                    0.05  
ExtraTreesRegressor                  0.27  
RANSACRegressor                      0.11  
ExtraTreeRegressor                   0.03  
DecisionTreeRegressor                0.03  
OrthogonalMatchingPursuit            0.02  
PassiveAggressiveRegressor           0.03  
DummyRegressor                       0.02  
LassoLars                            0.05  
KernelRidge                          0.05  
GaussianProcessRegressor             0.15  
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="n">reg</span> <span class="o">=</span> <span class="n">GradientBoostingRegressor</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">)</span>
<span class="n">reg</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
<span class="n">y_pred_age</span> <span class="o">=</span> <span class="n">reg</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">df_age_null</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="s">'Age'</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sorted</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">X</span><span class="p">.</span><span class="n">columns</span><span class="p">,</span><span class="n">reg</span><span class="p">.</span><span class="n">feature_importances_</span><span class="p">)),</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span> <span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">reverse</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[('Pclass', 0.2875237075556218),
 ('Title_Master', 0.22308304933036294),
 ('Title_Miss', 0.18876610581152578),
 ('Fare', 0.12578727577969293),
 ('Parch', 0.07597726791742207),
 ('group_size', 0.031715938077858045),
 ('SibSp', 0.020654143919620067),
 ('Title_Mrs', 0.019772061769482752),
 ('Title_High', 0.011331929875531917),
 ('Couple', 0.011230777637127936),
 ('Title_Mr', 0.0031612664439292478),
 ('Sex', 0.0008108349957762699),
 ('Alone', 0.000185640886048369)]
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_age_null</span><span class="p">.</span><span class="n">Age</span> <span class="o">=</span> <span class="n">y_pred_age</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_full</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">concat</span><span class="p">([</span><span class="n">df_age_notnull</span><span class="p">,</span><span class="n">df_age_null</span><span class="p">],</span> <span class="n">axis</span> <span class="o">=</span> <span class="mi">0</span><span class="p">).</span><span class="n">sort_index</span><span class="p">()</span>
<span class="n">df_full</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">concat</span><span class="p">([</span><span class="n">df_full</span><span class="p">,</span><span class="n">add_columns_train_test</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># df_train = df_full.iloc[:len(df_train)]
# df_test = df_full.iloc[len(df_train):]
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_full</span>
</code></pre></div></div>

<div id="df-5eab5b44-e64d-4e7f-a2b2-e559d44d936d">
    <div class="colab-df-container">
      <div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Pclass</th>
      <th>Sex</th>
      <th>Age</th>
      <th>SibSp</th>
      <th>Parch</th>
      <th>Fare</th>
      <th>Alone</th>
      <th>group_size</th>
      <th>Couple</th>
      <th>Title_High</th>
      <th>Title_Master</th>
      <th>Title_Miss</th>
      <th>Title_Mr</th>
      <th>Title_Mrs</th>
      <th>Survived</th>
      <th>Familly_id</th>
      <th>PassengerId</th>
      <th>Embarked_C</th>
      <th>Embarked_Q</th>
      <th>Embarked_S</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>3</td>
      <td>1</td>
      <td>22.00</td>
      <td>1</td>
      <td>0</td>
      <td>7.25</td>
      <td>0</td>
      <td>2</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>154.00</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>0</td>
      <td>38.00</td>
      <td>1</td>
      <td>0</td>
      <td>71.28</td>
      <td>0</td>
      <td>2</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>1</td>
      <td>130.00</td>
      <td>2</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>0</td>
      <td>26.00</td>
      <td>0</td>
      <td>0</td>
      <td>7.92</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0.00</td>
      <td>3</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1</td>
      <td>0</td>
      <td>35.00</td>
      <td>1</td>
      <td>0</td>
      <td>53.10</td>
      <td>0</td>
      <td>2</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>1</td>
      <td>13.00</td>
      <td>4</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>4</th>
      <td>3</td>
      <td>1</td>
      <td>35.00</td>
      <td>0</td>
      <td>0</td>
      <td>8.05</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0.00</td>
      <td>5</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>1304</th>
      <td>3</td>
      <td>1</td>
      <td>28.56</td>
      <td>0</td>
      <td>0</td>
      <td>8.05</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>9</td>
      <td>0.00</td>
      <td>1305</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1305</th>
      <td>1</td>
      <td>0</td>
      <td>39.00</td>
      <td>0</td>
      <td>0</td>
      <td>108.90</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>9</td>
      <td>0.00</td>
      <td>1306</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>1306</th>
      <td>3</td>
      <td>1</td>
      <td>38.50</td>
      <td>0</td>
      <td>0</td>
      <td>7.25</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>9</td>
      <td>0.00</td>
      <td>1307</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1307</th>
      <td>3</td>
      <td>1</td>
      <td>28.56</td>
      <td>0</td>
      <td>0</td>
      <td>8.05</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>9</td>
      <td>0.00</td>
      <td>1308</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1308</th>
      <td>3</td>
      <td>1</td>
      <td>6.78</td>
      <td>1</td>
      <td>1</td>
      <td>22.36</td>
      <td>0</td>
      <td>3</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>9</td>
      <td>64.00</td>
      <td>1309</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
<p>1309 rows Ã 20 columns</p>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-5eab5b44-e64d-4e7f-a2b2-e559d44d936d')" title="Convert this dataframe to an interactive table." style="display:none;">

  &lt;svg xmlns="http://www.w3.org/2000/svg" height="24px"viewBox="0 0 24 24"
       width="24px"&gt;
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z" /><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z" />
  &lt;/svg&gt;
      </button>

  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-5eab5b44-e64d-4e7f-a2b2-e559d44d936d button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-5eab5b44-e64d-4e7f-a2b2-e559d44d936d');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>

<h2 id="feature-engineering-2">Feature engineering 2</h2>

<h4 id="family-with-children">Family with children</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_full</span><span class="p">[</span><span class="s">'Familly_wt_chld'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_full</span><span class="p">.</span><span class="n">groupby</span><span class="p">([</span><span class="s">'Familly_id'</span><span class="p">]).</span><span class="n">Age</span><span class="p">.</span><span class="n">transform</span><span class="p">(</span><span class="s">'min'</span><span class="p">)</span>
<span class="n">df_full</span><span class="p">[</span><span class="s">'Familly_wt_chld'</span><span class="p">].</span><span class="n">loc</span><span class="p">[</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Familly_wt_chld'</span><span class="p">]</span><span class="o">&lt;</span><span class="mi">17</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">df_full</span><span class="p">[</span><span class="s">'Familly_wt_chld'</span><span class="p">].</span><span class="n">loc</span><span class="p">[</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Familly_wt_chld'</span><span class="p">]</span><span class="o">&gt;=</span><span class="mi">17</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">df_full</span><span class="p">.</span><span class="n">loc</span><span class="p">[(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Alone'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">),</span> <span class="s">'Familly_wt_chld'</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">df_full</span><span class="p">.</span><span class="n">loc</span><span class="p">[(</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Couple'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">),</span> <span class="s">'Familly_wt_chld'</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_full</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div id="df-8003d8f5-919b-49ed-b860-3717a825a748">
    <div class="colab-df-container">
      <div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Pclass</th>
      <th>Sex</th>
      <th>Age</th>
      <th>SibSp</th>
      <th>Parch</th>
      <th>Fare</th>
      <th>Alone</th>
      <th>group_size</th>
      <th>Couple</th>
      <th>Title_High</th>
      <th>Title_Master</th>
      <th>Title_Miss</th>
      <th>Title_Mr</th>
      <th>Title_Mrs</th>
      <th>Survived</th>
      <th>Familly_id</th>
      <th>PassengerId</th>
      <th>Embarked_C</th>
      <th>Embarked_Q</th>
      <th>Embarked_S</th>
      <th>Familly_wt_chld</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>3</td>
      <td>1</td>
      <td>22.00</td>
      <td>1</td>
      <td>0</td>
      <td>7.25</td>
      <td>0</td>
      <td>2</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>154.00</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0.00</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>0</td>
      <td>38.00</td>
      <td>1</td>
      <td>0</td>
      <td>71.28</td>
      <td>0</td>
      <td>2</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>1</td>
      <td>130.00</td>
      <td>2</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0.00</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>0</td>
      <td>26.00</td>
      <td>0</td>
      <td>0</td>
      <td>7.92</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0.00</td>
      <td>3</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0.00</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1</td>
      <td>0</td>
      <td>35.00</td>
      <td>1</td>
      <td>0</td>
      <td>53.10</td>
      <td>0</td>
      <td>2</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>1</td>
      <td>13.00</td>
      <td>4</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0.00</td>
    </tr>
    <tr>
      <th>4</th>
      <td>3</td>
      <td>1</td>
      <td>35.00</td>
      <td>0</td>
      <td>0</td>
      <td>8.05</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0.00</td>
      <td>5</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0.00</td>
    </tr>
  </tbody>
</table>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-8003d8f5-919b-49ed-b860-3717a825a748')" title="Convert this dataframe to an interactive table." style="display:none;">

  &lt;svg xmlns="http://www.w3.org/2000/svg" height="24px"viewBox="0 0 24 24"
       width="24px"&gt;
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z" /><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z" />
  &lt;/svg&gt;
      </button>

  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-8003d8f5-919b-49ed-b860-3717a825a748 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-8003d8f5-919b-49ed-b860-3717a825a748');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">chld</span> <span class="o">=</span> <span class="n">df_full</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Familly_wt_chld'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pd</span><span class="p">.</span><span class="n">crosstab</span><span class="p">(</span><span class="n">chld</span><span class="p">[</span><span class="s">'Familly_id'</span><span class="p">],</span> <span class="n">chld</span><span class="p">[</span><span class="s">'Survived'</span><span class="p">]).</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s">'bar'</span><span class="p">,</span> <span class="n">stacked</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="p">[</span><span class="s">'r'</span><span class="p">,</span><span class="s">'g'</span><span class="p">,</span><span class="s">'grey'</span><span class="p">],</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">30</span><span class="p">,</span><span class="mi">10</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="output_175_0.png" alt="png" /></p>

<p>Big familly (up to 4 people) =&gt; more likely to all died maybe they want to stay together</p>

<p>Small familly tend to all survived or just the men died</p>

<h4 id="connected-survival">Connected survival</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_full</span><span class="p">[</span><span class="s">'Connected_Survival'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_full</span><span class="p">.</span><span class="n">groupby</span><span class="p">([</span><span class="s">'Familly_id'</span><span class="p">])[</span><span class="s">'Survived'</span><span class="p">].</span><span class="n">transform</span><span class="p">(</span><span class="s">'median'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_full</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Alone'</span><span class="p">]</span><span class="o">==</span><span class="mi">1</span><span class="p">,</span> <span class="s">'Connected_Survival'</span><span class="p">]</span> <span class="o">=</span> <span class="mf">0.5</span>
<span class="n">df_full</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Connected_Survival'</span><span class="p">]</span><span class="o">==</span> <span class="mi">5</span> <span class="p">,</span> <span class="s">'Connected_Survival'</span><span class="p">]</span> <span class="o">=</span> <span class="mf">0.5</span>
<span class="n">df_full</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Connected_Survival'</span><span class="p">]</span><span class="o">==</span> <span class="mf">4.5</span><span class="p">,</span> <span class="s">'Connected_Survival'</span><span class="p">]</span> <span class="o">=</span> <span class="mf">0.5</span>
<span class="n">df_full</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">df_full</span><span class="p">[</span><span class="s">'Connected_Survival'</span><span class="p">]</span><span class="o">==</span> <span class="mi">9</span><span class="p">,</span> <span class="s">'Connected_Survival'</span><span class="p">]</span> <span class="o">=</span> <span class="mf">0.5</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_full</span><span class="p">[</span><span class="s">'Connected_Survival'</span><span class="p">].</span><span class="n">value_counts</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0.50    1027
1.00     170
0.00     112
Name: Connected_Survival, dtype: int64
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_full</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div id="df-8a7dfa99-14fa-4180-96cd-9a8f2b1246d6">
    <div class="colab-df-container">
      <div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Pclass</th>
      <th>Sex</th>
      <th>Age</th>
      <th>SibSp</th>
      <th>Parch</th>
      <th>Fare</th>
      <th>Alone</th>
      <th>group_size</th>
      <th>Couple</th>
      <th>Title_High</th>
      <th>Title_Master</th>
      <th>Title_Miss</th>
      <th>Title_Mr</th>
      <th>Title_Mrs</th>
      <th>Survived</th>
      <th>Familly_id</th>
      <th>PassengerId</th>
      <th>Embarked_C</th>
      <th>Embarked_Q</th>
      <th>Embarked_S</th>
      <th>Familly_wt_chld</th>
      <th>Connected_Survival</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>3</td>
      <td>1</td>
      <td>22.00</td>
      <td>1</td>
      <td>0</td>
      <td>7.25</td>
      <td>0</td>
      <td>2</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>154.00</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0.00</td>
      <td>0.00</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>0</td>
      <td>38.00</td>
      <td>1</td>
      <td>0</td>
      <td>71.28</td>
      <td>0</td>
      <td>2</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>1</td>
      <td>130.00</td>
      <td>2</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0.00</td>
      <td>0.50</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>0</td>
      <td>26.00</td>
      <td>0</td>
      <td>0</td>
      <td>7.92</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0.00</td>
      <td>3</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0.00</td>
      <td>0.50</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1</td>
      <td>0</td>
      <td>35.00</td>
      <td>1</td>
      <td>0</td>
      <td>53.10</td>
      <td>0</td>
      <td>2</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>1</td>
      <td>13.00</td>
      <td>4</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0.00</td>
      <td>0.50</td>
    </tr>
    <tr>
      <th>4</th>
      <td>3</td>
      <td>1</td>
      <td>35.00</td>
      <td>0</td>
      <td>0</td>
      <td>8.05</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0.00</td>
      <td>5</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0.00</td>
      <td>0.50</td>
    </tr>
  </tbody>
</table>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-8a7dfa99-14fa-4180-96cd-9a8f2b1246d6')" title="Convert this dataframe to an interactive table." style="display:none;">

  &lt;svg xmlns="http://www.w3.org/2000/svg" height="24px"viewBox="0 0 24 24"
       width="24px"&gt;
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z" /><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z" />
  &lt;/svg&gt;
      </button>

  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-8a7dfa99-14fa-4180-96cd-9a8f2b1246d6 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-8a7dfa99-14fa-4180-96cd-9a8f2b1246d6');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_full</span><span class="p">.</span><span class="n">iloc</span><span class="p">[:</span><span class="nb">len</span><span class="p">(</span><span class="n">df_train</span><span class="p">)].</span><span class="n">drop</span><span class="p">([</span><span class="s">'Familly_id'</span><span class="p">,</span> <span class="s">'PassengerId'</span><span class="p">],</span> <span class="n">axis</span> <span class="o">=</span> <span class="mi">1</span><span class="p">).</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div id="df-56812d90-d2f1-45cd-b5c6-24f5298d9f65">
    <div class="colab-df-container">
      <div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Pclass</th>
      <th>Sex</th>
      <th>Age</th>
      <th>SibSp</th>
      <th>Parch</th>
      <th>Fare</th>
      <th>Alone</th>
      <th>group_size</th>
      <th>Couple</th>
      <th>Title_High</th>
      <th>Title_Master</th>
      <th>Title_Miss</th>
      <th>Title_Mr</th>
      <th>Title_Mrs</th>
      <th>Survived</th>
      <th>Embarked_C</th>
      <th>Embarked_Q</th>
      <th>Embarked_S</th>
      <th>Familly_wt_chld</th>
      <th>Connected_Survival</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>3</td>
      <td>1</td>
      <td>22.00</td>
      <td>1</td>
      <td>0</td>
      <td>7.25</td>
      <td>0</td>
      <td>2</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0.00</td>
      <td>0.00</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>0</td>
      <td>38.00</td>
      <td>1</td>
      <td>0</td>
      <td>71.28</td>
      <td>0</td>
      <td>2</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>1</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0.00</td>
      <td>0.50</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>0</td>
      <td>26.00</td>
      <td>0</td>
      <td>0</td>
      <td>7.92</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0.00</td>
      <td>0.50</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1</td>
      <td>0</td>
      <td>35.00</td>
      <td>1</td>
      <td>0</td>
      <td>53.10</td>
      <td>0</td>
      <td>2</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0.00</td>
      <td>0.50</td>
    </tr>
    <tr>
      <th>4</th>
      <td>3</td>
      <td>1</td>
      <td>35.00</td>
      <td>0</td>
      <td>0</td>
      <td>8.05</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0.00</td>
      <td>0.50</td>
    </tr>
  </tbody>
</table>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-56812d90-d2f1-45cd-b5c6-24f5298d9f65')" title="Convert this dataframe to an interactive table." style="display:none;">

  &lt;svg xmlns="http://www.w3.org/2000/svg" height="24px"viewBox="0 0 24 24"
       width="24px"&gt;
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z" /><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z" />
  &lt;/svg&gt;
      </button>

  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-56812d90-d2f1-45cd-b5c6-24f5298d9f65 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-56812d90-d2f1-45cd-b5c6-24f5298d9f65');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># df_train = df_full.iloc[:len(df_train)].drop(['Familly_id', 'PassengerId', 'SibSp', 'Parch', 'Embarked_C', 'Embarked_Q', 'Embarked_S'], axis = 1)
# df_test = df_full.iloc[len(df_train):].drop(['Familly_id', 'PassengerId', 'SibSp', 'Parch', 'Embarked_C', 'Embarked_Q', 'Embarked_S'], axis = 1)
</span>
<span class="n">df_train</span> <span class="o">=</span> <span class="n">df_full</span><span class="p">.</span><span class="n">iloc</span><span class="p">[:</span><span class="nb">len</span><span class="p">(</span><span class="n">df_train</span><span class="p">)].</span><span class="n">drop</span><span class="p">([</span><span class="s">'Familly_id'</span><span class="p">,</span> <span class="s">'PassengerId'</span><span class="p">],</span> <span class="n">axis</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">df_test</span> <span class="o">=</span> <span class="n">df_full</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">df_train</span><span class="p">):].</span><span class="n">drop</span><span class="p">([</span><span class="s">'Familly_id'</span><span class="p">,</span> <span class="s">'PassengerId'</span><span class="p">],</span> <span class="n">axis</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="modeling">Modeling</h2>

<h3 id="preprocessing">Preprocessing</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_train</span><span class="p">.</span><span class="n">Age</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s">'kde'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Age'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Age'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="output_186_0.png" alt="png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">scaler</span> <span class="o">=</span> <span class="n">StandardScaler</span><span class="p">()</span>

<span class="n">df_train</span><span class="p">[</span><span class="s">'Age'</span><span class="p">]</span> <span class="o">=</span> <span class="n">scaler</span><span class="p">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">df_train</span><span class="p">[[</span><span class="s">'Age'</span><span class="p">]])</span>
<span class="n">df_test</span><span class="p">[</span><span class="s">'Age'</span><span class="p">]</span> <span class="o">=</span> <span class="n">scaler</span><span class="p">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">df_test</span><span class="p">[[</span><span class="s">'Age'</span><span class="p">]])</span>


<span class="n">df_train</span><span class="p">[</span><span class="s">'Age'</span><span class="p">].</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s">'kde'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Train: Standardize Age'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Age'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>


<span class="n">df_test</span><span class="p">[</span><span class="s">'Age'</span><span class="p">].</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s">'kde'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Test: Standardize Age'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Age'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="output_187_0.png" alt="png" /></p>

<p><img src="output_187_1.png" alt="png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_train</span><span class="p">.</span><span class="n">Fare</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s">'kde'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Standardize log Fare'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Fare'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="output_188_0.png" alt="png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">transformer</span> <span class="o">=</span> <span class="n">FunctionTransformer</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">log1p</span><span class="p">,</span> <span class="n">validate</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="n">df_train</span><span class="p">[</span><span class="s">'Fare'</span><span class="p">]</span> <span class="o">=</span> <span class="n">scaler</span><span class="p">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">transformer</span><span class="p">.</span><span class="n">transform</span><span class="p">(</span><span class="n">df_train</span><span class="p">[[</span><span class="s">'Fare'</span><span class="p">]]))</span>
<span class="n">df_test</span><span class="p">[</span><span class="s">'Fare'</span><span class="p">]</span> <span class="o">=</span> <span class="n">scaler</span><span class="p">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">transformer</span><span class="p">.</span><span class="n">transform</span><span class="p">(</span><span class="n">df_test</span><span class="p">[[</span><span class="s">'Fare'</span><span class="p">]]))</span>

<span class="n">df_train</span><span class="p">[</span><span class="s">'Fare'</span><span class="p">].</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s">'kde'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Train: Standardize log Fare'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Fare'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>


<span class="n">df_test</span><span class="p">[</span><span class="s">'Fare'</span><span class="p">].</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s">'kde'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Test: Standardize log Fare'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Fare'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>

</code></pre></div></div>

<p><img src="output_189_0.png" alt="png" /></p>

<p><img src="output_189_1.png" alt="png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_train</span>
</code></pre></div></div>

<div id="df-5ccbd4ca-3c86-4b13-8ce8-ac1cf19e488c">
    <div class="colab-df-container">
      <div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Pclass</th>
      <th>Sex</th>
      <th>Age</th>
      <th>SibSp</th>
      <th>Parch</th>
      <th>Fare</th>
      <th>Alone</th>
      <th>group_size</th>
      <th>Couple</th>
      <th>Title_High</th>
      <th>Title_Master</th>
      <th>Title_Miss</th>
      <th>Title_Mr</th>
      <th>Title_Mrs</th>
      <th>Survived</th>
      <th>Embarked_C</th>
      <th>Embarked_Q</th>
      <th>Embarked_S</th>
      <th>Familly_wt_chld</th>
      <th>Connected_Survival</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>3</td>
      <td>1</td>
      <td>-0.56</td>
      <td>1</td>
      <td>0</td>
      <td>-0.88</td>
      <td>0</td>
      <td>2</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0.00</td>
      <td>0.00</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>0</td>
      <td>0.63</td>
      <td>1</td>
      <td>0</td>
      <td>1.36</td>
      <td>0</td>
      <td>2</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>1</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0.00</td>
      <td>0.50</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>0</td>
      <td>-0.26</td>
      <td>0</td>
      <td>0</td>
      <td>-0.80</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0.00</td>
      <td>0.50</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1</td>
      <td>0</td>
      <td>0.40</td>
      <td>1</td>
      <td>0</td>
      <td>1.06</td>
      <td>0</td>
      <td>2</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0.00</td>
      <td>0.50</td>
    </tr>
    <tr>
      <th>4</th>
      <td>3</td>
      <td>1</td>
      <td>0.40</td>
      <td>0</td>
      <td>0</td>
      <td>-0.78</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0.00</td>
      <td>0.50</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>886</th>
      <td>2</td>
      <td>1</td>
      <td>-0.19</td>
      <td>0</td>
      <td>0</td>
      <td>-0.33</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0.00</td>
      <td>0.50</td>
    </tr>
    <tr>
      <th>887</th>
      <td>1</td>
      <td>0</td>
      <td>-0.78</td>
      <td>0</td>
      <td>0</td>
      <td>0.49</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0.00</td>
      <td>0.50</td>
    </tr>
    <tr>
      <th>888</th>
      <td>3</td>
      <td>0</td>
      <td>-1.60</td>
      <td>1</td>
      <td>2</td>
      <td>0.24</td>
      <td>0</td>
      <td>4</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>1.00</td>
      <td>0.50</td>
    </tr>
    <tr>
      <th>889</th>
      <td>1</td>
      <td>1</td>
      <td>-0.26</td>
      <td>0</td>
      <td>0</td>
      <td>0.49</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>1</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0.00</td>
      <td>0.50</td>
    </tr>
    <tr>
      <th>890</th>
      <td>3</td>
      <td>1</td>
      <td>0.18</td>
      <td>0</td>
      <td>0</td>
      <td>-0.82</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0.00</td>
      <td>0.50</td>
    </tr>
  </tbody>
</table>
<p>891 rows Ã 20 columns</p>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-5ccbd4ca-3c86-4b13-8ce8-ac1cf19e488c')" title="Convert this dataframe to an interactive table." style="display:none;">

  &lt;svg xmlns="http://www.w3.org/2000/svg" height="24px"viewBox="0 0 24 24"
       width="24px"&gt;
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z" /><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z" />
  &lt;/svg&gt;
      </button>

  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-5ccbd4ca-3c86-4b13-8ce8-ac1cf19e488c button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-5ccbd4ca-3c86-4b13-8ce8-ac1cf19e488c');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>

<h3 id="feature-selection">Feature selection</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">X</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="s">'Survived'</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">[</span><span class="s">'Survived'</span><span class="p">]</span>
<span class="n">X_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_test</span> <span class="o">=</span> <span class="n">train_test_split</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">)</span>

<span class="n">model</span> <span class="o">=</span> <span class="n">RandomForestClassifier</span><span class="p">(</span><span class="n">n_estimators</span><span class="o">=</span><span class="mi">200</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>


<span class="n">model</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span><span class="n">y_train</span><span class="p">)</span>
<span class="n">importance</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s">'feature'</span><span class="p">:</span><span class="n">X_train</span><span class="p">.</span><span class="n">columns</span><span class="p">,</span> <span class="s">'importance'</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="nb">round</span><span class="p">(</span><span class="n">model</span><span class="p">.</span><span class="n">feature_importances_</span><span class="p">,</span><span class="mi">3</span><span class="p">)}).</span><span class="n">sort_values</span><span class="p">(</span><span class="s">'importance'</span><span class="p">,</span> <span class="n">ascending</span><span class="o">=</span><span class="bp">False</span><span class="p">).</span><span class="n">set_index</span><span class="p">(</span><span class="s">'feature'</span><span class="p">)</span>
<span class="n">importance</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s">'bar'</span><span class="p">,</span> <span class="n">rot</span><span class="o">=</span><span class="mi">90</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span><span class="mi">6</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="output_192_0.png" alt="png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">importance</span><span class="p">.</span><span class="n">index</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Index(['Age', 'Fare', 'Connected_Survival', 'Title_Mr', 'Sex', 'Pclass',
       'Title_Mrs', 'group_size', 'Title_Miss', 'SibSp', 'Parch', 'Embarked_S',
       'Embarked_C', 'Familly_wt_chld', 'Alone', 'Title_High', 'Title_Master',
       'Embarked_Q', 'Couple'],
      dtype='object', name='feature')
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">selected_cols</span> <span class="o">=</span> <span class="p">[</span><span class="s">'Age'</span><span class="p">,</span> <span class="s">'Fare'</span><span class="p">,</span> <span class="s">'Connected_Survival'</span><span class="p">,</span> <span class="s">'Title_Mr'</span><span class="p">,</span> <span class="s">'Sex'</span><span class="p">,</span> <span class="s">'Pclass'</span><span class="p">,</span>
       <span class="s">'Title_Mrs'</span><span class="p">,</span> <span class="s">'group_size'</span><span class="p">,</span> <span class="s">'Title_Miss'</span><span class="p">,</span> <span class="s">'Title_High'</span><span class="p">,</span> <span class="s">'Title_Master'</span><span class="p">,</span><span class="s">'Survived'</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_train</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">[</span><span class="n">selected_cols</span><span class="p">]</span>
<span class="n">df_test</span> <span class="o">=</span> <span class="n">df_test</span><span class="p">[</span><span class="n">selected_cols</span><span class="p">]</span>
</code></pre></div></div>

<h3 id="model-selection">Model selection</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">X</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="s">'Survived'</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">[</span><span class="s">'Survived'</span><span class="p">]</span>
<span class="n">X_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_test</span> <span class="o">=</span> <span class="n">train_test_split</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">clf</span> <span class="o">=</span> <span class="n">LazyClassifier</span><span class="p">(</span><span class="n">ignore_warnings</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">custom_metric</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
<span class="n">models</span><span class="p">,</span> <span class="n">predictions</span> <span class="o">=</span> <span class="n">clf</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_test</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">models</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> 14%|ââ        | 4/29 [00:00&lt;00:02, 11.03it/s]

CategoricalNB model failed to execute
Negative values in data passed to CategoricalNB (input X)


100%|ââââââââââ| 29/29 [00:01&lt;00:00, 18.46it/s]

StackingClassifier model failed to execute
__init__() missing 1 required positional argument: 'estimators'
                               Accuracy  Balanced Accuracy  ROC AUC  F1 Score  \
Model                                                                           
LabelPropagation                   0.88               0.87     0.87      0.88   
LabelSpreading                     0.88               0.87     0.87      0.88   
LGBMClassifier                     0.86               0.86     0.86      0.86   
RidgeClassifierCV                  0.87               0.86     0.86      0.87   
RidgeClassifier                    0.87               0.86     0.86      0.87   
LogisticRegression                 0.87               0.86     0.86      0.87   
LinearDiscriminantAnalysis         0.87               0.86     0.86      0.87   
LinearSVC                          0.87               0.86     0.86      0.87   
CalibratedClassifierCV             0.87               0.86     0.86      0.87   
SGDClassifier                      0.87               0.85     0.85      0.86   
ExtraTreesClassifier               0.85               0.84     0.84      0.85   
RandomForestClassifier             0.85               0.84     0.84      0.85   
SVC                                0.86               0.84     0.84      0.86   
NuSVC                              0.86               0.84     0.84      0.86   
AdaBoostClassifier                 0.85               0.84     0.84      0.85   
XGBClassifier                      0.83               0.83     0.83      0.83   
PassiveAggressiveClassifier        0.83               0.83     0.83      0.83   
DecisionTreeClassifier             0.83               0.83     0.83      0.83   
KNeighborsClassifier               0.83               0.82     0.82      0.83   
BaggingClassifier                  0.83               0.82     0.82      0.83   
ExtraTreeClassifier                0.82               0.82     0.82      0.82   
BernoulliNB                        0.81               0.81     0.81      0.81   
NearestCentroid                    0.80               0.80     0.80      0.80   
GaussianNB                         0.79               0.79     0.79      0.79   
Perceptron                         0.82               0.78     0.78      0.81   
QuadraticDiscriminantAnalysis      0.61               0.51     0.51      0.46   
DummyClassifier                    0.51               0.49     0.49      0.51   

                               Time Taken  
Model                                      
LabelPropagation                     0.06  
LabelSpreading                       0.07  
LGBMClassifier                       0.08  
RidgeClassifierCV                    0.02  
RidgeClassifier                      0.03  
LogisticRegression                   0.03  
LinearDiscriminantAnalysis           0.03  
LinearSVC                            0.07  
CalibratedClassifierCV               0.17  
SGDClassifier                        0.02  
ExtraTreesClassifier                 0.19  
RandomForestClassifier               0.23  
SVC                                  0.03  
NuSVC                                0.04  
AdaBoostClassifier                   0.13  
XGBClassifier                        0.10  
PassiveAggressiveClassifier          0.02  
DecisionTreeClassifier               0.02  
KNeighborsClassifier                 0.03  
BaggingClassifier                    0.05  
ExtraTreeClassifier                  0.02  
BernoulliNB                          0.02  
NearestCentroid                      0.02  
GaussianNB                           0.02  
Perceptron                           0.02  
QuadraticDiscriminantAnalysis        0.02  
DummyClassifier                      0.02  
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div>

<h3 id="model-tuning-grid-search">Model tuning: Grid search</h3>

<p>Model selected: LGBMClassifier, XGBClassifier, AdaBoostClassifier, LogisticRegression, SVC, RandomForestClassifier, Decision Tree
,KNeighborsClassifier</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">grid_test</span><span class="p">(</span><span class="n">model_name</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">parameters</span><span class="p">,</span> <span class="n">X_train</span><span class="o">=</span><span class="n">X_train</span><span class="p">,</span> <span class="n">X_test</span><span class="o">=</span><span class="n">X_test</span><span class="p">,</span> <span class="n">y_train</span><span class="o">=</span><span class="n">y_train</span><span class="p">,</span> <span class="n">y_test</span><span class="o">=</span><span class="n">y_test</span> <span class="p">):</span>
  
  <span class="n">model</span> <span class="o">=</span> <span class="n">GridSearchCV</span><span class="p">(</span>
    <span class="n">model</span><span class="p">,</span> 
    <span class="n">parameters</span><span class="p">,</span> 
    <span class="n">cv</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span>
    <span class="n">scoring</span><span class="o">=</span><span class="s">'accuracy'</span><span class="p">,</span>
<span class="p">)</span>
  
  <span class="n">model</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
  <span class="c1"># y_pred = model.predict(X_test)
</span>
  <span class="c1"># Mean cross-validated score of the best_estimator
</span>  <span class="k">print</span><span class="p">(</span><span class="n">model_name</span><span class="p">,</span> <span class="s">': '</span><span class="p">,</span> <span class="n">model</span><span class="p">.</span><span class="n">best_score_</span><span class="p">,</span> <span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
  <span class="c1"># print(classification_report(y_test, y_pred),'\n')
</span>

  <span class="c1"># return model_name, round(accuracy_score(y_test, y_pred)*100, 2), model.best_estimator_
</span>  <span class="k">return</span> <span class="n">model_name</span><span class="p">,</span> <span class="n">model</span><span class="p">.</span><span class="n">best_score_</span><span class="p">,</span> <span class="n">model</span><span class="p">.</span><span class="n">best_estimator_</span>


</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># good
</span><span class="n">lgbm_param</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">'n_estimators'</span><span class="p">:</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">125</span><span class="p">,</span> <span class="mi">150</span><span class="p">],</span>
    <span class="s">'learning_rate'</span><span class="p">:</span> <span class="p">[</span><span class="mf">0.01</span><span class="p">,</span> <span class="mf">0.05</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">],</span>
    <span class="s">'num_leaves'</span><span class="p">:</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">31</span><span class="p">],</span>
<span class="p">}</span>

<span class="c1"># good
</span><span class="n">log_reg_param</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">"penalty"</span><span class="p">:</span> <span class="p">[</span><span class="s">"l1"</span><span class="p">,</span> <span class="s">"l2"</span><span class="p">],</span>

<span class="p">}</span>

<span class="c1"># good
</span><span class="n">xgb_param</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">'max_depth'</span><span class="p">:</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">],</span> 
    <span class="s">'n_estimators'</span><span class="p">:</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">100</span><span class="p">],</span>
    <span class="s">'learning_rate'</span><span class="p">:</span> <span class="p">[</span><span class="mf">0.01</span><span class="p">,</span> <span class="mf">0.05</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">]</span>
<span class="p">}</span>

<span class="c1"># good
</span><span class="n">ada_param</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">'n_estimators'</span><span class="p">:</span> <span class="p">[</span><span class="mi">70</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">150</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">250</span><span class="p">,</span><span class="mi">300</span><span class="p">,</span> <span class="mi">400</span><span class="p">],</span>
    <span class="s">'learning_rate'</span><span class="p">:</span> <span class="p">[</span><span class="mf">0.01</span><span class="p">,</span> <span class="mf">0.05</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">]</span>
<span class="p">}</span>

<span class="c1"># good
</span><span class="n">svc_param</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">"C"</span><span class="p">:</span> <span class="p">[</span><span class="mf">0.001</span><span class="p">,</span> <span class="mf">0.01</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mf">1.</span><span class="p">],</span>
    <span class="s">"kernel"</span><span class="p">:</span> <span class="p">[</span><span class="s">"linear"</span><span class="p">,</span> <span class="s">"poly"</span><span class="p">,</span> <span class="s">"rbf"</span><span class="p">,</span> <span class="s">"sigmoid"</span><span class="p">]</span>
<span class="p">}</span>

<span class="c1"># good
</span><span class="n">knn_param</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">'n_neighbors'</span><span class="p">:[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">25</span><span class="p">],</span>
    <span class="s">"weights"</span><span class="p">:</span> <span class="p">[</span><span class="s">"uniform"</span><span class="p">,</span> <span class="s">"distance"</span><span class="p">]</span>
<span class="p">}</span>

<span class="c1"># good
</span><span class="n">rf_param</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">"n_estimators"</span><span class="p">:</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">25</span><span class="p">],</span> 
    <span class="s">"max_depth"</span><span class="p">:</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">13</span><span class="p">]</span>
<span class="p">}</span>

<span class="c1"># good
</span><span class="n">d_tree_param</span> <span class="o">=</span>  <span class="p">{</span>
    <span class="s">"max_depth"</span><span class="p">:</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">13</span><span class="p">]</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># lgbm = LGBMClassifier(random_state= 42)
</span><span class="n">log_reg</span> <span class="o">=</span> <span class="n">LogisticRegression</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span> <span class="mi">42</span><span class="p">)</span>
<span class="n">xgb</span> <span class="o">=</span> <span class="n">xgboost</span><span class="p">.</span><span class="n">XGBClassifier</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">)</span>
<span class="n">ada</span> <span class="o">=</span> <span class="n">AdaBoostClassifier</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">)</span>
<span class="n">svc</span> <span class="o">=</span> <span class="n">SVC</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">)</span>
<span class="n">knn</span> <span class="o">=</span> <span class="n">KNeighborsClassifier</span><span class="p">()</span>
<span class="n">rf</span> <span class="o">=</span> <span class="n">RandomForestClassifier</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">)</span>
<span class="n">d_tree</span> <span class="o">=</span>  <span class="n">DecisionTreeClassifier</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">)</span>

<span class="n">models</span> <span class="o">=</span> <span class="p">[(</span><span class="s">'LogisticRegression'</span><span class="p">,</span><span class="n">log_reg</span><span class="p">,</span> <span class="n">log_reg_param</span><span class="p">),</span> <span class="p">(</span><span class="s">'XGBClassifier'</span><span class="p">,</span><span class="n">xgb</span><span class="p">,</span> <span class="n">xgb_param</span><span class="p">),</span> 
          <span class="p">(</span><span class="s">'AdaBoostClassifier'</span><span class="p">,</span><span class="n">ada</span><span class="p">,</span> <span class="n">ada_param</span><span class="p">),</span> <span class="p">(</span><span class="s">'SVC'</span><span class="p">,</span><span class="n">svc</span><span class="p">,</span> <span class="n">svc_param</span><span class="p">),</span> <span class="p">(</span><span class="s">'KNeighborsClassifier'</span><span class="p">,</span><span class="n">knn</span><span class="p">,</span> <span class="n">knn_param</span><span class="p">),</span> 
          <span class="p">(</span><span class="s">'RandomForestClassifier'</span><span class="p">,</span><span class="n">rf</span><span class="p">,</span> <span class="n">rf_param</span><span class="p">),</span> <span class="p">(</span><span class="s">'Decision Tree'</span><span class="p">,</span><span class="n">d_tree</span><span class="p">,</span> <span class="n">d_tree_param</span><span class="p">)</span> <span class="p">]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">acc_dic</span><span class="o">=</span><span class="p">{}</span>
<span class="n">model_dic</span><span class="o">=</span><span class="p">{}</span>


<span class="k">for</span> <span class="n">model</span> <span class="ow">in</span> <span class="n">models</span><span class="p">:</span>
  <span class="n">name</span><span class="p">,</span><span class="n">acc</span><span class="p">,</span> <span class="n">best_model</span> <span class="o">=</span> <span class="n">grid_test</span><span class="p">(</span><span class="n">model</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">model</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="n">model</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
  <span class="n">acc_dic</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">acc</span>
  <span class="n">model_dic</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">best_model</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>LogisticRegression :  0.8622825721018966 

XGBClassifier :  0.8623274604421501 

AdaBoostClassifier :  0.8637975535854562 

SVC :  0.8592974974750309 

KNeighborsClassifier :  0.8308495118392998 

RandomForestClassifier :  0.8682976096958814 

Decision Tree :  0.8592862753899675 
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">.</span><span class="n">from_dict</span><span class="p">(</span><span class="n">acc_dic</span><span class="p">,</span> <span class="n">orient</span><span class="o">=</span><span class="s">'index'</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'Mean CV Accuracy'</span><span class="p">]).</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="s">'Mean CV Accuracy'</span><span class="p">,</span> <span class="n">ascending</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div>

<div id="df-cfb2a4bb-ec18-4b2a-9dce-b920c6458e49">
    <div class="colab-df-container">
      <div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Mean CV Accuracy</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>RandomForestClassifier</th>
      <td>0.87</td>
    </tr>
    <tr>
      <th>AdaBoostClassifier</th>
      <td>0.86</td>
    </tr>
    <tr>
      <th>XGBClassifier</th>
      <td>0.86</td>
    </tr>
    <tr>
      <th>LogisticRegression</th>
      <td>0.86</td>
    </tr>
    <tr>
      <th>SVC</th>
      <td>0.86</td>
    </tr>
    <tr>
      <th>Decision Tree</th>
      <td>0.86</td>
    </tr>
    <tr>
      <th>KNeighborsClassifier</th>
      <td>0.83</td>
    </tr>
  </tbody>
</table>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-cfb2a4bb-ec18-4b2a-9dce-b920c6458e49')" title="Convert this dataframe to an interactive table." style="display:none;">

  &lt;svg xmlns="http://www.w3.org/2000/svg" height="24px"viewBox="0 0 24 24"
       width="24px"&gt;
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z" /><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z" />
  &lt;/svg&gt;
      </button>

  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-cfb2a4bb-ec18-4b2a-9dce-b920c6458e49 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-cfb2a4bb-ec18-4b2a-9dce-b920c6458e49');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># param_dic
</span><span class="n">model_dic</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{'AdaBoostClassifier': AdaBoostClassifier(learning_rate=0.05, n_estimators=150, random_state=42),
 'Decision Tree': DecisionTreeClassifier(max_depth=3, random_state=42),
 'KNeighborsClassifier': KNeighborsClassifier(n_neighbors=25),
 'LogisticRegression': LogisticRegression(random_state=42),
 'RandomForestClassifier': RandomForestClassifier(max_depth=11, n_estimators=15, random_state=42),
 'SVC': SVC(C=0.5, kernel='linear', random_state=42),
 'XGBClassifier': XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,
               colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,
               importance_type='gain', interaction_constraints='',
               learning_rate=0.05, max_delta_step=0, max_depth=3,
               min_child_weight=1, missing=nan, monotone_constraints='()',
               n_estimators=100, n_jobs=0, num_parallel_tree=1, random_state=42,
               reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,
               tree_method='exact', validate_parameters=1, verbosity=None)}
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># del model_dic['KNeighborsClassifier']
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">merge_dic</span><span class="o">=</span><span class="p">{}</span>

<span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">model_dic</span><span class="p">:</span>
  <span class="n">clf</span> <span class="o">=</span> <span class="n">model_dic</span><span class="p">[</span><span class="n">name</span><span class="p">]</span>
  <span class="n">clf</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
  <span class="n">merge_dic</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">clf</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">df_test</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="s">'Survived'</span><span class="p">,</span> <span class="n">axis</span> <span class="o">=</span><span class="mi">1</span><span class="p">)).</span><span class="n">astype</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
  <span class="k">try</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">X</span><span class="p">.</span><span class="n">columns</span><span class="p">,</span> <span class="n">clf</span><span class="p">.</span><span class="n">feature_importances_</span><span class="p">)),</span> <span class="n">key</span><span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">reverse</span> <span class="o">=</span><span class="bp">True</span><span class="p">))</span>
  <span class="k">except</span><span class="p">:</span>
    <span class="k">pass</span>


</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[('Title_Mr', 0.44055337), ('Sex', 0.2207235), ('Connected_Survival', 0.14359803), ('Pclass', 0.055487707), ('Title_High', 0.051033624), ('Fare', 0.030312808), ('Age', 0.020293158), ('group_size', 0.019132487), ('Title_Mrs', 0.018865246), ('Title_Miss', 0.0), ('Title_Master', 0.0)]
[('Connected_Survival', 0.30666666666666664), ('Sex', 0.20666666666666667), ('Fare', 0.12666666666666668), ('Title_Mr', 0.1), ('Pclass', 0.07333333333333333), ('Age', 0.06666666666666667), ('group_size', 0.06), ('Title_Mrs', 0.04), ('Title_Master', 0.02), ('Title_Miss', 0.0), ('Title_High', 0.0)]
[('Connected_Survival', 0.19264316002428414), ('Fare', 0.16928464759383838), ('Title_Mr', 0.16519173517117558), ('Age', 0.15241349077108826), ('Sex', 0.09809834981432293), ('Pclass', 0.06696274153989282), ('group_size', 0.049104385048042196), ('Title_Mrs', 0.046761232307283254), ('Title_Miss', 0.030941130604998444), ('Title_Master', 0.01490387052670376), ('Title_High', 0.013695256598370394)]
[('Title_Mr', 0.5530102878290563), ('Connected_Survival', 0.3352118807377972), ('Fare', 0.06464280584152439), ('Title_High', 0.047135025591622054), ('Age', 0.0), ('Sex', 0.0), ('Pclass', 0.0), ('Title_Mrs', 0.0), ('group_size', 0.0), ('Title_Miss', 0.0), ('Title_Master', 0.0)]
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_pred</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">merge_dic</span><span class="p">)</span>
<span class="n">df_pred</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div id="df-e76c5481-7004-416c-a115-abcfddd61695">
    <div class="colab-df-container">
      <div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>LogisticRegression</th>
      <th>XGBClassifier</th>
      <th>AdaBoostClassifier</th>
      <th>SVC</th>
      <th>KNeighborsClassifier</th>
      <th>RandomForestClassifier</th>
      <th>Decision Tree</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>0</td>
      <td>1</td>
      <td>1</td>
      <td>1</td>
      <td>0</td>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1</td>
      <td>1</td>
      <td>1</td>
      <td>1</td>
      <td>1</td>
      <td>1</td>
      <td>1</td>
    </tr>
  </tbody>
</table>
</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-e76c5481-7004-416c-a115-abcfddd61695')" title="Convert this dataframe to an interactive table." style="display:none;">

  &lt;svg xmlns="http://www.w3.org/2000/svg" height="24px"viewBox="0 0 24 24"
       width="24px"&gt;
    <path d="M0 0h24v24H0V0z" fill="none" />
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z" /><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z" />
  &lt;/svg&gt;
      </button>

  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-e76c5481-7004-416c-a115-abcfddd61695 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-e76c5481-7004-416c-a115-abcfddd61695');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># np.round(df_pred.apply(sum, axis=1) / df_pred.shape[1]).astype(int)
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># y_pred = np.round(df_pred.apply(sum, axis=1) / df_pred.shape[1]).astype(int)
</span>
<span class="c1"># submission = pd.concat([pd.Series(df_test.index+1, name='PassengerId'), pd.Series(y_pred, name='Survived')], axis=1)
</span>
<span class="c1"># submission.to_csv('new_submission.csv', index=False)
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># top 6% 
</span><span class="n">y_pred</span> <span class="o">=</span> <span class="n">df_pred</span><span class="p">[</span><span class="s">'RandomForestClassifier'</span><span class="p">]</span>

<span class="n">submission</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">concat</span><span class="p">([</span><span class="n">pd</span><span class="p">.</span><span class="n">Series</span><span class="p">(</span><span class="n">df_test</span><span class="p">.</span><span class="n">index</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'PassengerId'</span><span class="p">),</span> <span class="n">pd</span><span class="p">.</span><span class="n">Series</span><span class="p">(</span><span class="n">y_pred</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'Survived'</span><span class="p">)],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="n">submission</span><span class="p">.</span><span class="n">to_csv</span><span class="p">(</span><span class="s">'RandomForestClassifier5.csv'</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div>
:ET